
SequenceGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000097e  00000a12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000097e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080010a  0080010a  00000a1c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fbe  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000906  00000000  00000000  00001aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000080d  00000000  00000000  000023f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00002c00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b2  00000000  00000000  00002de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000677  00000000  00000000  00003392  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003a09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__vector_5>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__vector_7>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__vector_11>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	bb 02       	muls	r27, r27
  6a:	e6 02       	muls	r30, r22
  6c:	12 03       	mulsu	r17, r18
  6e:	3e 03       	fmul	r19, r22
  70:	6b 03       	fmul	r22, r19
  72:	97 03       	fmuls	r17, r23
  74:	c4 03       	fmuls	r20, r20
  76:	f1 03       	fmuls	r23, r17
  78:	1d 04       	cpc	r1, r13
  7a:	49 04       	cpc	r4, r9

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ee e7       	ldi	r30, 0x7E	; 126
  90:	f9 e0       	ldi	r31, 0x09	; 9
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	aa 30       	cpi	r26, 0x0A	; 10
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	aa e0       	ldi	r26, 0x0A	; 10
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a7 31       	cpi	r26, 0x17	; 23
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 49 01 	call	0x292	; 0x292 <main>
  b2:	0c 94 bd 04 	jmp	0x97a	; 0x97a <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <driveSpeaker>:
}

void toneOff(void)
{
	// disable timer1 interrupts to stop tone
	TIMSK1 = 0;
  ba:	82 30       	cpi	r24, 0x02	; 2
  bc:	01 f1       	breq	.+64     	; 0xfe <driveSpeaker+0x44>
  be:	28 f4       	brcc	.+10     	; 0xca <driveSpeaker+0x10>
  c0:	88 23       	and	r24, r24
  c2:	49 f0       	breq	.+18     	; 0xd6 <driveSpeaker+0x1c>
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	89 f0       	breq	.+34     	; 0xea <driveSpeaker+0x30>
  c8:	42 c0       	rjmp	.+132    	; 0x14e <driveSpeaker+0x94>
  ca:	84 30       	cpi	r24, 0x04	; 4
  cc:	61 f1       	breq	.+88     	; 0x126 <driveSpeaker+0x6c>
  ce:	08 f1       	brcs	.+66     	; 0x112 <driveSpeaker+0x58>
  d0:	85 30       	cpi	r24, 0x05	; 5
  d2:	99 f1       	breq	.+102    	; 0x13a <driveSpeaker+0x80>
  d4:	3c c0       	rjmp	.+120    	; 0x14e <driveSpeaker+0x94>
  d6:	80 e8       	ldi	r24, 0x80	; 128
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  de:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e8:	08 95       	ret
  ea:	80 e7       	ldi	r24, 0x70	; 112
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  fc:	08 95       	ret
  fe:	80 e6       	ldi	r24, 0x60	; 96
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 106:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 110:	08 95       	ret
 112:	80 e5       	ldi	r24, 0x50	; 80
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 11a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 124:	08 95       	ret
 126:	80 e4       	ldi	r24, 0x40	; 64
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 12e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 138:	08 95       	ret
 13a:	80 e3       	ldi	r24, 0x30	; 48
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 142:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 14c:	08 95       	ret
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 156:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 160:	08 95       	ret

00000162 <displaySequence>:
 162:	df 92       	push	r13
 164:	ef 92       	push	r14
 166:	ff 92       	push	r15
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	e8 e6       	ldi	r30, 0x68	; 104
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	20 81       	ld	r18, Z
 176:	2b 7f       	andi	r18, 0xFB	; 251
 178:	20 83       	st	Z, r18
 17a:	18 16       	cp	r1, r24
 17c:	19 06       	cpc	r1, r25
 17e:	64 f5       	brge	.+88     	; 0x1d8 <displaySequence+0x76>
 180:	cc e0       	ldi	r28, 0x0C	; 12
 182:	d1 e0       	ldi	r29, 0x01	; 1
 184:	8c 01       	movw	r16, r24
 186:	04 5f       	subi	r16, 0xF4	; 244
 188:	1e 4f       	sbci	r17, 0xFE	; 254
 18a:	0f 2e       	mov	r0, r31
 18c:	f6 e0       	ldi	r31, 0x06	; 6
 18e:	df 2e       	mov	r13, r31
 190:	f0 2d       	mov	r31, r0
 192:	0f 2e       	mov	r0, r31
 194:	ff e6       	ldi	r31, 0x6F	; 111
 196:	ef 2e       	mov	r14, r31
 198:	f1 2c       	mov	r15, r1
 19a:	f0 2d       	mov	r31, r0
 19c:	fe 01       	movw	r30, r28
 19e:	99 91       	ld	r25, Y+
 1a0:	98 b9       	out	0x08, r25	; 8
 1a2:	80 81       	ld	r24, Z
 1a4:	0e 94 5d 00 	call	0xba	; 0xba <driveSpeaker>
 1a8:	2f ef       	ldi	r18, 0xFF	; 255
 1aa:	83 ed       	ldi	r24, 0xD3	; 211
 1ac:	90 e3       	ldi	r25, 0x30	; 48
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <displaySequence+0x4c>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <displaySequence+0x56>
 1b8:	00 00       	nop
 1ba:	d8 b8       	out	0x08, r13	; 8
 1bc:	f7 01       	movw	r30, r14
 1be:	10 82       	st	Z, r1
 1c0:	ff ef       	ldi	r31, 0xFF	; 255
 1c2:	21 ee       	ldi	r18, 0xE1	; 225
 1c4:	84 e0       	ldi	r24, 0x04	; 4
 1c6:	f1 50       	subi	r31, 0x01	; 1
 1c8:	20 40       	sbci	r18, 0x00	; 0
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <displaySequence+0x64>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <displaySequence+0x6e>
 1d0:	00 00       	nop
 1d2:	c0 17       	cp	r28, r16
 1d4:	d1 07       	cpc	r29, r17
 1d6:	11 f7       	brne	.-60     	; 0x19c <displaySequence+0x3a>
 1d8:	e8 e6       	ldi	r30, 0x68	; 104
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	84 60       	ori	r24, 0x04	; 4
 1e0:	80 83       	st	Z, r24
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	ff 90       	pop	r15
 1ec:	ef 90       	pop	r14
 1ee:	df 90       	pop	r13
 1f0:	08 95       	ret

000001f2 <seedSequence>:
 1f2:	dc 01       	movw	r26, r24
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	8c 93       	st	X, r24
 1f8:	ec e7       	ldi	r30, 0x7C	; 124
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	85 e0       	ldi	r24, 0x05	; 5
 1fe:	80 83       	st	Z, r24
 200:	80 81       	ld	r24, Z
 202:	80 64       	ori	r24, 0x40	; 64
 204:	80 83       	st	Z, r24
 206:	80 81       	ld	r24, Z
 208:	8f 7d       	andi	r24, 0xDF	; 223
 20a:	80 83       	st	Z, r24
 20c:	ea e7       	ldi	r30, 0x7A	; 122
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	90 81       	ld	r25, Z
 212:	97 60       	ori	r25, 0x07	; 7
 214:	90 83       	st	Z, r25
 216:	90 81       	ld	r25, Z
 218:	90 68       	ori	r25, 0x80	; 128
 21a:	90 83       	st	Z, r25
 21c:	90 81       	ld	r25, Z
 21e:	90 64       	ori	r25, 0x40	; 64
 220:	90 83       	st	Z, r25
 222:	90 81       	ld	r25, Z
 224:	96 fd       	sbrc	r25, 6
 226:	fd cf       	rjmp	.-6      	; 0x222 <seedSequence+0x30>
 228:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 22c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 230:	ea e7       	ldi	r30, 0x7A	; 122
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	90 81       	ld	r25, Z
 236:	9f 77       	andi	r25, 0x7F	; 127
 238:	90 83       	st	Z, r25
 23a:	8c 93       	st	X, r24
 23c:	08 95       	ret

0000023e <generateSequence>:
 23e:	db 01       	movw	r26, r22
 240:	88 23       	and	r24, r24
 242:	31 f1       	breq	.+76     	; 0x290 <generateSequence+0x52>
 244:	ec e0       	ldi	r30, 0x0C	; 12
 246:	f1 e0       	ldi	r31, 0x01	; 1
 248:	48 2f       	mov	r20, r24
 24a:	50 e0       	ldi	r21, 0x00	; 0
 24c:	44 5f       	subi	r20, 0xF4	; 244
 24e:	5e 4f       	sbci	r21, 0xFE	; 254
 250:	6b ea       	ldi	r22, 0xAB	; 171
 252:	9c 91       	ld	r25, X
 254:	80 e8       	ldi	r24, 0x80	; 128
 256:	98 9f       	mul	r25, r24
 258:	90 01       	movw	r18, r0
 25a:	11 24       	eor	r1, r1
 25c:	29 27       	eor	r18, r25
 25e:	82 2f       	mov	r24, r18
 260:	82 95       	swap	r24
 262:	86 95       	lsr	r24
 264:	87 70       	andi	r24, 0x07	; 7
 266:	28 27       	eor	r18, r24
 268:	82 2f       	mov	r24, r18
 26a:	88 0f       	add	r24, r24
 26c:	88 0f       	add	r24, r24
 26e:	88 0f       	add	r24, r24
 270:	28 27       	eor	r18, r24
 272:	2c 93       	st	X, r18
 274:	26 9f       	mul	r18, r22
 276:	91 2d       	mov	r25, r1
 278:	11 24       	eor	r1, r1
 27a:	96 95       	lsr	r25
 27c:	96 95       	lsr	r25
 27e:	89 2f       	mov	r24, r25
 280:	88 0f       	add	r24, r24
 282:	98 0f       	add	r25, r24
 284:	99 0f       	add	r25, r25
 286:	29 1b       	sub	r18, r25
 288:	21 93       	st	Z+, r18
 28a:	e4 17       	cp	r30, r20
 28c:	f5 07       	cpc	r31, r21
 28e:	09 f7       	brne	.-62     	; 0x252 <generateSequence+0x14>
 290:	08 95       	ret

00000292 <main>:
 292:	21 9a       	sbi	0x04, 1	; 4
 294:	82 e0       	ldi	r24, 0x02	; 2
 296:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 29a:	95 e0       	ldi	r25, 0x05	; 5
 29c:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 2a0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 2a4:	80 ea       	ldi	r24, 0xA0	; 160
 2a6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 2aa:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 2ae:	8b e8       	ldi	r24, 0x8B	; 139
 2b0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 2b4:	ed e6       	ldi	r30, 0x6D	; 109
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	8f 63       	ori	r24, 0x3F	; 63
 2bc:	80 83       	st	Z, r24
 2be:	78 94       	sei
 2c0:	87 b1       	in	r24, 0x07	; 7
 2c2:	87 60       	ori	r24, 0x07	; 7
 2c4:	87 b9       	out	0x07, r24	; 7
 2c6:	8a b1       	in	r24, 0x0a	; 10
 2c8:	80 6c       	ori	r24, 0xC0	; 192
 2ca:	8a b9       	out	0x0a, r24	; 10
 2cc:	84 b1       	in	r24, 0x04	; 4
 2ce:	8c 63       	ori	r24, 0x3C	; 60
 2d0:	84 b9       	out	0x04, r24	; 4
 2d2:	85 b1       	in	r24, 0x05	; 5
 2d4:	8c 63       	ori	r24, 0x3C	; 60
 2d6:	85 b9       	out	0x05, r24	; 5
 2d8:	8a b1       	in	r24, 0x0a	; 10
 2da:	8a b9       	out	0x0a, r24	; 10
 2dc:	8b b1       	in	r24, 0x0b	; 11
 2de:	8f 63       	ori	r24, 0x3F	; 63
 2e0:	8b b9       	out	0x0b, r24	; 11
 2e2:	8b e0       	ldi	r24, 0x0B	; 11
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <seedSequence>
 2ea:	c2 e0       	ldi	r28, 0x02	; 2
 2ec:	08 e6       	ldi	r16, 0x68	; 104
 2ee:	10 e0       	ldi	r17, 0x00	; 0
 2f0:	d6 e0       	ldi	r29, 0x06	; 6
 2f2:	0f 2e       	mov	r0, r31
 2f4:	ff e6       	ldi	r31, 0x6F	; 111
 2f6:	ef 2e       	mov	r14, r31
 2f8:	f1 2c       	mov	r15, r1
 2fa:	f0 2d       	mov	r31, r0
 2fc:	0f c0       	rjmp	.+30     	; 0x31c <main+0x8a>
 2fe:	f8 01       	movw	r30, r16
 300:	80 81       	ld	r24, Z
 302:	84 60       	ori	r24, 0x04	; 4
 304:	80 83       	st	Z, r24
 306:	d8 b9       	out	0x08, r29	; 8
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	51 e0       	ldi	r21, 0x01	; 1
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 b3 04 	call	0x966	; 0x966 <setValue>
 318:	f7 01       	movw	r30, r14
 31a:	10 82       	st	Z, r1
 31c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 320:	88 23       	and	r24, r24
 322:	69 f3       	breq	.-38     	; 0x2fe <main+0x6c>
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	b9 f1       	breq	.+110    	; 0x396 <main+0x104>
 328:	82 30       	cpi	r24, 0x02	; 2
 32a:	69 f4       	brne	.+26     	; 0x346 <main+0xb4>
 32c:	40 e0       	ldi	r20, 0x00	; 0
 32e:	51 e0       	ldi	r21, 0x01	; 1
 330:	62 e0       	ldi	r22, 0x02	; 2
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 b3 04 	call	0x966	; 0x966 <setValue>
 33c:	8a e0       	ldi	r24, 0x0A	; 10
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 b1 00 	call	0x162	; 0x162 <displaySequence>
 344:	02 c0       	rjmp	.+4      	; 0x34a <main+0xb8>
 346:	83 30       	cpi	r24, 0x03	; 3
 348:	19 f4       	brne	.+6      	; 0x350 <main+0xbe>
 34a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 34e:	e6 cf       	rjmp	.-52     	; 0x31c <main+0x8a>
 350:	84 30       	cpi	r24, 0x04	; 4
 352:	81 f4       	brne	.+32     	; 0x374 <main+0xe2>
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	51 e0       	ldi	r21, 0x01	; 1
 358:	63 e0       	ldi	r22, 0x03	; 3
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	83 e0       	ldi	r24, 0x03	; 3
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 b3 04 	call	0x966	; 0x966 <setValue>
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	91 e0       	ldi	r25, 0x01	; 1
 368:	0e 94 9f 04 	call	0x93e	; 0x93e <countValueUp>
 36c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 370:	84 30       	cpi	r24, 0x04	; 4
 372:	81 f3       	breq	.-32     	; 0x354 <main+0xc2>
 374:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 378:	85 30       	cpi	r24, 0x05	; 5
 37a:	81 f6       	brne	.-96     	; 0x31c <main+0x8a>
 37c:	40 e0       	ldi	r20, 0x00	; 0
 37e:	51 e0       	ldi	r21, 0x01	; 1
 380:	64 e0       	ldi	r22, 0x04	; 4
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	84 e0       	ldi	r24, 0x04	; 4
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 b3 04 	call	0x966	; 0x966 <setValue>
 38c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 390:	85 30       	cpi	r24, 0x05	; 5
 392:	a1 f3       	breq	.-24     	; 0x37c <main+0xea>
 394:	c3 cf       	rjmp	.-122    	; 0x31c <main+0x8a>
 396:	40 e0       	ldi	r20, 0x00	; 0
 398:	51 e0       	ldi	r21, 0x01	; 1
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 b3 04 	call	0x966	; 0x966 <setValue>
 3a6:	6b e0       	ldi	r22, 0x0B	; 11
 3a8:	71 e0       	ldi	r23, 0x01	; 1
 3aa:	8a e0       	ldi	r24, 0x0A	; 10
 3ac:	0e 94 1f 01 	call	0x23e	; 0x23e <generateSequence>
 3b0:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <__data_end>
 3b4:	bb cf       	rjmp	.-138    	; 0x32c <main+0x9a>

000003b6 <__vector_7>:
}


ISR(TIMER2_COMPA_vect) {
 3b6:	1f 92       	push	r1
 3b8:	0f 92       	push	r0
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	0f 92       	push	r0
 3be:	11 24       	eor	r1, r1
 3c0:	1f 93       	push	r17
 3c2:	2f 93       	push	r18
 3c4:	3f 93       	push	r19
 3c6:	4f 93       	push	r20
 3c8:	5f 93       	push	r21
 3ca:	6f 93       	push	r22
 3cc:	7f 93       	push	r23
 3ce:	8f 93       	push	r24
 3d0:	9f 93       	push	r25
 3d2:	af 93       	push	r26
 3d4:	bf 93       	push	r27
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	ef 93       	push	r30
 3dc:	ff 93       	push	r31
	TCCR1C = 0x80;
 3de:	c2 e8       	ldi	r28, 0x82	; 130
 3e0:	d0 e0       	ldi	r29, 0x00	; 0
 3e2:	10 e8       	ldi	r17, 0x80	; 128
 3e4:	18 83       	st	Y, r17
	displayDigits(&disp);
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	0e 94 63 02 	call	0x4c6	; 0x4c6 <displayDigits>
	TCCR1C = 0x80;
 3ee:	18 83       	st	Y, r17
}
 3f0:	ff 91       	pop	r31
 3f2:	ef 91       	pop	r30
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	bf 91       	pop	r27
 3fa:	af 91       	pop	r26
 3fc:	9f 91       	pop	r25
 3fe:	8f 91       	pop	r24
 400:	7f 91       	pop	r23
 402:	6f 91       	pop	r22
 404:	5f 91       	pop	r21
 406:	4f 91       	pop	r20
 408:	3f 91       	pop	r19
 40a:	2f 91       	pop	r18
 40c:	1f 91       	pop	r17
 40e:	0f 90       	pop	r0
 410:	0f be       	out	0x3f, r0	; 63
 412:	0f 90       	pop	r0
 414:	1f 90       	pop	r1
 416:	18 95       	reti

00000418 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 418:	1f 92       	push	r1
 41a:	0f 92       	push	r0
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	0f 92       	push	r0
 420:	11 24       	eor	r1, r1
 422:	8f 93       	push	r24
 424:	9f 93       	push	r25
	PORTB ^= (1 << speaker);
 426:	95 b1       	in	r25, 0x05	; 5
 428:	82 e0       	ldi	r24, 0x02	; 2
 42a:	89 27       	eor	r24, r25
 42c:	85 b9       	out	0x05, r24	; 5
}
 42e:	9f 91       	pop	r25
 430:	8f 91       	pop	r24
 432:	0f 90       	pop	r0
 434:	0f be       	out	0x3f, r0	; 63
 436:	0f 90       	pop	r0
 438:	1f 90       	pop	r1
 43a:	18 95       	reti

0000043c <__vector_5>:

ISR(PCINT2_vect) {
 43c:	1f 92       	push	r1
 43e:	0f 92       	push	r0
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	0f 92       	push	r0
 444:	11 24       	eor	r1, r1
 446:	2f 93       	push	r18
 448:	3f 93       	push	r19
 44a:	4f 93       	push	r20
 44c:	5f 93       	push	r21
 44e:	6f 93       	push	r22
 450:	7f 93       	push	r23
 452:	8f 93       	push	r24
 454:	9f 93       	push	r25
 456:	af 93       	push	r26
 458:	bf 93       	push	r27
 45a:	ef 93       	push	r30
 45c:	ff 93       	push	r31
	enum color input;
	
	if(gameState==idle) gameState=start;
 45e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 462:	81 11       	cpse	r24, r1
 464:	03 c0       	rjmp	.+6      	; 0x46c <__vector_5+0x30>
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	
	if(!(PIND & (1 << PURPLE))) {
 46c:	48 9b       	sbis	0x09, 0	; 9
 46e:	0c c0       	rjmp	.+24     	; 0x488 <__vector_5+0x4c>
		input = PURPLE;
	}
	else if(!(PIND & (1 << ORANGE))) {
 470:	49 9b       	sbis	0x09, 1	; 9
 472:	0c c0       	rjmp	.+24     	; 0x48c <__vector_5+0x50>
		input = ORANGE;
	}
	else if(!(PIND & (1 << BLUE))) {
 474:	4a 9b       	sbis	0x09, 2	; 9
 476:	0c c0       	rjmp	.+24     	; 0x490 <__vector_5+0x54>
		input = BLUE;
	}
	else if(!(PIND & (1 << YELLOW))) {
 478:	4b 9b       	sbis	0x09, 3	; 9
 47a:	0c c0       	rjmp	.+24     	; 0x494 <__vector_5+0x58>
		input = YELLOW;
	}
	else if(!(PIND & (1 << GREEN))) {
 47c:	4c 9b       	sbis	0x09, 4	; 9
 47e:	0c c0       	rjmp	.+24     	; 0x498 <__vector_5+0x5c>
		input = GREEN;
	}
	else if(!(PIND & (1 << RED))) {
 480:	4d 9b       	sbis	0x09, 5	; 9
 482:	0c c0       	rjmp	.+24     	; 0x49c <__vector_5+0x60>
		input = RED;
	}
	else {
		input = OFF;
 484:	86 e0       	ldi	r24, 0x06	; 6
 486:	0b c0       	rjmp	.+22     	; 0x49e <__vector_5+0x62>
	enum color input;
	
	if(gameState==idle) gameState=start;
	
	if(!(PIND & (1 << PURPLE))) {
		input = PURPLE;
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	09 c0       	rjmp	.+18     	; 0x49e <__vector_5+0x62>
	}
	else if(!(PIND & (1 << ORANGE))) {
		input = ORANGE;
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	07 c0       	rjmp	.+14     	; 0x49e <__vector_5+0x62>
	}
	else if(!(PIND & (1 << BLUE))) {
		input = BLUE;
 490:	82 e0       	ldi	r24, 0x02	; 2
 492:	05 c0       	rjmp	.+10     	; 0x49e <__vector_5+0x62>
	}
	else if(!(PIND & (1 << YELLOW))) {
		input = YELLOW;
 494:	83 e0       	ldi	r24, 0x03	; 3
 496:	03 c0       	rjmp	.+6      	; 0x49e <__vector_5+0x62>
	}
	else if(!(PIND & (1 << GREEN))) {
		input = GREEN;
 498:	84 e0       	ldi	r24, 0x04	; 4
 49a:	01 c0       	rjmp	.+2      	; 0x49e <__vector_5+0x62>
	}
	else if(!(PIND & (1 << RED))) {
		input = RED;
 49c:	85 e0       	ldi	r24, 0x05	; 5
	
	TCCR1C = 0x80;
}

void driveLED(enum color col) {
	PORTC = col;	
 49e:	88 b9       	out	0x08, r24	; 8
	}
	else {
		input = OFF;
	}
	driveLED(input);
	driveSpeaker(input);
 4a0:	0e 94 5d 00 	call	0xba	; 0xba <driveSpeaker>
 4a4:	ff 91       	pop	r31
 4a6:	ef 91       	pop	r30
 4a8:	bf 91       	pop	r27
 4aa:	af 91       	pop	r26
 4ac:	9f 91       	pop	r25
 4ae:	8f 91       	pop	r24
 4b0:	7f 91       	pop	r23
 4b2:	6f 91       	pop	r22
 4b4:	5f 91       	pop	r21
 4b6:	4f 91       	pop	r20
 4b8:	3f 91       	pop	r19
 4ba:	2f 91       	pop	r18
 4bc:	0f 90       	pop	r0
 4be:	0f be       	out	0x3f, r0	; 63
 4c0:	0f 90       	pop	r0
 4c2:	1f 90       	pop	r1
 4c4:	18 95       	reti

000004c6 <displayDigits>:
 * displayDigit function to drive SN74LS47 IC
 * input integer in BCD to drive a common anode 7-seg display
 * PORTC must be used, pins are configurable in struct
 */

void displayDigits(sSegPtr_t disp) {
 4c6:	dc 01       	movw	r26, r24
	int value;
	//ACTIVE LOW PNP
	if(disp->lastDisplayed == disp->digit0) {
 4c8:	14 96       	adiw	r26, 0x04	; 4
 4ca:	3c 91       	ld	r19, X
 4cc:	14 97       	sbiw	r26, 0x04	; 4
 4ce:	18 96       	adiw	r26, 0x08	; 8
 4d0:	8c 91       	ld	r24, X
 4d2:	18 97       	sbiw	r26, 0x08	; 8
 4d4:	83 13       	cpse	r24, r19
 4d6:	25 c0       	rjmp	.+74     	; 0x522 <displayDigits+0x5c>
		PORTD |= (1 << disp->digit1);
 4d8:	4b b1       	in	r20, 0x0b	; 11
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	9c 01       	movw	r18, r24
 4e0:	15 96       	adiw	r26, 0x05	; 5
 4e2:	0c 90       	ld	r0, X
 4e4:	15 97       	sbiw	r26, 0x05	; 5
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <displayDigits+0x26>
 4e8:	22 0f       	add	r18, r18
 4ea:	33 1f       	adc	r19, r19
 4ec:	0a 94       	dec	r0
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <displayDigits+0x22>
 4f0:	24 2b       	or	r18, r20
 4f2:	2b b9       	out	0x0b, r18	; 11
		PORTD &= ~(1 << disp->digit0);
 4f4:	2b b1       	in	r18, 0x0b	; 11
 4f6:	14 96       	adiw	r26, 0x04	; 4
 4f8:	0c 90       	ld	r0, X
 4fa:	14 97       	sbiw	r26, 0x04	; 4
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <displayDigits+0x3c>
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	0a 94       	dec	r0
 504:	e2 f7       	brpl	.-8      	; 0x4fe <displayDigits+0x38>
 506:	80 95       	com	r24
 508:	82 23       	and	r24, r18
 50a:	8b b9       	out	0x0b, r24	; 11
		value = disp->digitValue0;
 50c:	16 96       	adiw	r26, 0x06	; 6
 50e:	ec 91       	ld	r30, X
 510:	16 97       	sbiw	r26, 0x06	; 6
 512:	f0 e0       	ldi	r31, 0x00	; 0
		disp->lastDisplayed = disp->digit1;
 514:	15 96       	adiw	r26, 0x05	; 5
 516:	8c 91       	ld	r24, X
 518:	15 97       	sbiw	r26, 0x05	; 5
 51a:	18 96       	adiw	r26, 0x08	; 8
 51c:	8c 93       	st	X, r24
 51e:	18 97       	sbiw	r26, 0x08	; 8
 520:	22 c0       	rjmp	.+68     	; 0x566 <displayDigits+0xa0>
	}
	else  {
		PORTD |= (1 << disp->digit0);
 522:	4b b1       	in	r20, 0x0b	; 11
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	bc 01       	movw	r22, r24
 52a:	02 c0       	rjmp	.+4      	; 0x530 <displayDigits+0x6a>
 52c:	66 0f       	add	r22, r22
 52e:	77 1f       	adc	r23, r23
 530:	3a 95       	dec	r19
 532:	e2 f7       	brpl	.-8      	; 0x52c <displayDigits+0x66>
 534:	9b 01       	movw	r18, r22
 536:	24 2b       	or	r18, r20
 538:	2b b9       	out	0x0b, r18	; 11
		PORTD &= ~(1 << disp->digit1);
 53a:	2b b1       	in	r18, 0x0b	; 11
 53c:	15 96       	adiw	r26, 0x05	; 5
 53e:	0c 90       	ld	r0, X
 540:	15 97       	sbiw	r26, 0x05	; 5
 542:	02 c0       	rjmp	.+4      	; 0x548 <displayDigits+0x82>
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	0a 94       	dec	r0
 54a:	e2 f7       	brpl	.-8      	; 0x544 <displayDigits+0x7e>
 54c:	80 95       	com	r24
 54e:	82 23       	and	r24, r18
 550:	8b b9       	out	0x0b, r24	; 11
		value = disp->digitValue1;
 552:	17 96       	adiw	r26, 0x07	; 7
 554:	ec 91       	ld	r30, X
 556:	17 97       	sbiw	r26, 0x07	; 7
 558:	f0 e0       	ldi	r31, 0x00	; 0
		disp->lastDisplayed = disp->digit0;
 55a:	14 96       	adiw	r26, 0x04	; 4
 55c:	8c 91       	ld	r24, X
 55e:	14 97       	sbiw	r26, 0x04	; 4
 560:	18 96       	adiw	r26, 0x08	; 8
 562:	8c 93       	st	X, r24
 564:	18 97       	sbiw	r26, 0x08	; 8
	}
	
	switch (value) {
 566:	ea 30       	cpi	r30, 0x0A	; 10
 568:	f1 05       	cpc	r31, r1
 56a:	08 f0       	brcs	.+2      	; 0x56e <displayDigits+0xa8>
 56c:	bf c1       	rjmp	.+894    	; 0x8ec <displayDigits+0x426>
 56e:	ec 5c       	subi	r30, 0xCC	; 204
 570:	ff 4f       	sbci	r31, 0xFF	; 255
 572:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__tablejump2__>
		case(0): 
			PORTB  &= ~((1 << disp->pinA) | (1 << disp->pinB) | (1 << disp->pinC) | (1 << disp->pinD));
 576:	25 b1       	in	r18, 0x05	; 5
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	bc 01       	movw	r22, r24
 57e:	0c 90       	ld	r0, X
 580:	02 c0       	rjmp	.+4      	; 0x586 <displayDigits+0xc0>
 582:	66 0f       	add	r22, r22
 584:	77 1f       	adc	r23, r23
 586:	0a 94       	dec	r0
 588:	e2 f7       	brpl	.-8      	; 0x582 <displayDigits+0xbc>
 58a:	ac 01       	movw	r20, r24
 58c:	11 96       	adiw	r26, 0x01	; 1
 58e:	0c 90       	ld	r0, X
 590:	11 97       	sbiw	r26, 0x01	; 1
 592:	02 c0       	rjmp	.+4      	; 0x598 <displayDigits+0xd2>
 594:	44 0f       	add	r20, r20
 596:	55 1f       	adc	r21, r21
 598:	0a 94       	dec	r0
 59a:	e2 f7       	brpl	.-8      	; 0x594 <displayDigits+0xce>
 59c:	36 2f       	mov	r19, r22
 59e:	34 2b       	or	r19, r20
 5a0:	ac 01       	movw	r20, r24
 5a2:	12 96       	adiw	r26, 0x02	; 2
 5a4:	0c 90       	ld	r0, X
 5a6:	12 97       	sbiw	r26, 0x02	; 2
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <displayDigits+0xe8>
 5aa:	44 0f       	add	r20, r20
 5ac:	55 1f       	adc	r21, r21
 5ae:	0a 94       	dec	r0
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <displayDigits+0xe4>
 5b2:	43 2b       	or	r20, r19
 5b4:	13 96       	adiw	r26, 0x03	; 3
 5b6:	0c 90       	ld	r0, X
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <displayDigits+0xf8>
 5ba:	88 0f       	add	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	0a 94       	dec	r0
 5c0:	e2 f7       	brpl	.-8      	; 0x5ba <displayDigits+0xf4>
 5c2:	84 2b       	or	r24, r20
 5c4:	80 95       	com	r24
 5c6:	82 23       	and	r24, r18
 5c8:	85 b9       	out	0x05, r24	; 5
			break;
 5ca:	08 95       	ret
		case(1):
			PORTB  |= ((1 << disp->pinA));
 5cc:	45 b1       	in	r20, 0x05	; 5
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	9c 01       	movw	r18, r24
 5d4:	0c 90       	ld	r0, X
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <displayDigits+0x116>
 5d8:	22 0f       	add	r18, r18
 5da:	33 1f       	adc	r19, r19
 5dc:	0a 94       	dec	r0
 5de:	e2 f7       	brpl	.-8      	; 0x5d8 <displayDigits+0x112>
 5e0:	24 2b       	or	r18, r20
 5e2:	25 b9       	out	0x05, r18	; 5
			PORTB  &= ~((1 << disp->pinB) | (1 << disp->pinC) | (1 << disp->pinD));
 5e4:	25 b1       	in	r18, 0x05	; 5
 5e6:	bc 01       	movw	r22, r24
 5e8:	11 96       	adiw	r26, 0x01	; 1
 5ea:	0c 90       	ld	r0, X
 5ec:	11 97       	sbiw	r26, 0x01	; 1
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <displayDigits+0x12e>
 5f0:	66 0f       	add	r22, r22
 5f2:	77 1f       	adc	r23, r23
 5f4:	0a 94       	dec	r0
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <displayDigits+0x12a>
 5f8:	ac 01       	movw	r20, r24
 5fa:	12 96       	adiw	r26, 0x02	; 2
 5fc:	0c 90       	ld	r0, X
 5fe:	12 97       	sbiw	r26, 0x02	; 2
 600:	02 c0       	rjmp	.+4      	; 0x606 <displayDigits+0x140>
 602:	44 0f       	add	r20, r20
 604:	55 1f       	adc	r21, r21
 606:	0a 94       	dec	r0
 608:	e2 f7       	brpl	.-8      	; 0x602 <displayDigits+0x13c>
 60a:	46 2b       	or	r20, r22
 60c:	13 96       	adiw	r26, 0x03	; 3
 60e:	0c 90       	ld	r0, X
 610:	02 c0       	rjmp	.+4      	; 0x616 <displayDigits+0x150>
 612:	88 0f       	add	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	0a 94       	dec	r0
 618:	e2 f7       	brpl	.-8      	; 0x612 <displayDigits+0x14c>
 61a:	84 2b       	or	r24, r20
 61c:	80 95       	com	r24
 61e:	82 23       	and	r24, r18
 620:	85 b9       	out	0x05, r24	; 5
			break;
 622:	08 95       	ret
		case(2):
			PORTB  |= ((1 << disp->pinB));
 624:	45 b1       	in	r20, 0x05	; 5
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	9c 01       	movw	r18, r24
 62c:	11 96       	adiw	r26, 0x01	; 1
 62e:	0c 90       	ld	r0, X
 630:	11 97       	sbiw	r26, 0x01	; 1
 632:	02 c0       	rjmp	.+4      	; 0x638 <displayDigits+0x172>
 634:	22 0f       	add	r18, r18
 636:	33 1f       	adc	r19, r19
 638:	0a 94       	dec	r0
 63a:	e2 f7       	brpl	.-8      	; 0x634 <displayDigits+0x16e>
 63c:	24 2b       	or	r18, r20
 63e:	25 b9       	out	0x05, r18	; 5
			PORTB  &= ~((1 << disp->pinA) | (1 << disp->pinC) | (1 << disp->pinD));
 640:	25 b1       	in	r18, 0x05	; 5
 642:	bc 01       	movw	r22, r24
 644:	0c 90       	ld	r0, X
 646:	02 c0       	rjmp	.+4      	; 0x64c <displayDigits+0x186>
 648:	66 0f       	add	r22, r22
 64a:	77 1f       	adc	r23, r23
 64c:	0a 94       	dec	r0
 64e:	e2 f7       	brpl	.-8      	; 0x648 <displayDigits+0x182>
 650:	ac 01       	movw	r20, r24
 652:	12 96       	adiw	r26, 0x02	; 2
 654:	0c 90       	ld	r0, X
 656:	12 97       	sbiw	r26, 0x02	; 2
 658:	02 c0       	rjmp	.+4      	; 0x65e <displayDigits+0x198>
 65a:	44 0f       	add	r20, r20
 65c:	55 1f       	adc	r21, r21
 65e:	0a 94       	dec	r0
 660:	e2 f7       	brpl	.-8      	; 0x65a <displayDigits+0x194>
 662:	46 2b       	or	r20, r22
 664:	13 96       	adiw	r26, 0x03	; 3
 666:	0c 90       	ld	r0, X
 668:	02 c0       	rjmp	.+4      	; 0x66e <displayDigits+0x1a8>
 66a:	88 0f       	add	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	0a 94       	dec	r0
 670:	e2 f7       	brpl	.-8      	; 0x66a <displayDigits+0x1a4>
 672:	84 2b       	or	r24, r20
 674:	80 95       	com	r24
 676:	82 23       	and	r24, r18
 678:	85 b9       	out	0x05, r24	; 5
			break;
 67a:	08 95       	ret
		case(3):
			PORTB  |= ((1 << disp->pinA) |  (1 << disp->pinB));
 67c:	35 b1       	in	r19, 0x05	; 5
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	bc 01       	movw	r22, r24
 684:	0c 90       	ld	r0, X
 686:	02 c0       	rjmp	.+4      	; 0x68c <displayDigits+0x1c6>
 688:	66 0f       	add	r22, r22
 68a:	77 1f       	adc	r23, r23
 68c:	0a 94       	dec	r0
 68e:	e2 f7       	brpl	.-8      	; 0x688 <displayDigits+0x1c2>
 690:	ac 01       	movw	r20, r24
 692:	11 96       	adiw	r26, 0x01	; 1
 694:	0c 90       	ld	r0, X
 696:	11 97       	sbiw	r26, 0x01	; 1
 698:	02 c0       	rjmp	.+4      	; 0x69e <displayDigits+0x1d8>
 69a:	44 0f       	add	r20, r20
 69c:	55 1f       	adc	r21, r21
 69e:	0a 94       	dec	r0
 6a0:	e2 f7       	brpl	.-8      	; 0x69a <displayDigits+0x1d4>
 6a2:	26 2f       	mov	r18, r22
 6a4:	24 2b       	or	r18, r20
 6a6:	23 2b       	or	r18, r19
 6a8:	25 b9       	out	0x05, r18	; 5
			PORTB  &= ~((1 << disp->pinC) | (1 << disp->pinD));
 6aa:	25 b1       	in	r18, 0x05	; 5
 6ac:	ac 01       	movw	r20, r24
 6ae:	12 96       	adiw	r26, 0x02	; 2
 6b0:	0c 90       	ld	r0, X
 6b2:	12 97       	sbiw	r26, 0x02	; 2
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <displayDigits+0x1f4>
 6b6:	44 0f       	add	r20, r20
 6b8:	55 1f       	adc	r21, r21
 6ba:	0a 94       	dec	r0
 6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <displayDigits+0x1f0>
 6be:	13 96       	adiw	r26, 0x03	; 3
 6c0:	0c 90       	ld	r0, X
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <displayDigits+0x202>
 6c4:	88 0f       	add	r24, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	0a 94       	dec	r0
 6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <displayDigits+0x1fe>
 6cc:	84 2b       	or	r24, r20
 6ce:	80 95       	com	r24
 6d0:	82 23       	and	r24, r18
 6d2:	85 b9       	out	0x05, r24	; 5
			break;
 6d4:	08 95       	ret
		case(4):
			PORTB  |= ((1 << disp->pinC));
 6d6:	45 b1       	in	r20, 0x05	; 5
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	9c 01       	movw	r18, r24
 6de:	12 96       	adiw	r26, 0x02	; 2
 6e0:	0c 90       	ld	r0, X
 6e2:	12 97       	sbiw	r26, 0x02	; 2
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <displayDigits+0x224>
 6e6:	22 0f       	add	r18, r18
 6e8:	33 1f       	adc	r19, r19
 6ea:	0a 94       	dec	r0
 6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <displayDigits+0x220>
 6ee:	24 2b       	or	r18, r20
 6f0:	25 b9       	out	0x05, r18	; 5
			PORTB  &= ~((1 << disp->pinA) | (1 << disp->pinB) |  (1 << disp->pinD));
 6f2:	25 b1       	in	r18, 0x05	; 5
 6f4:	bc 01       	movw	r22, r24
 6f6:	0c 90       	ld	r0, X
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <displayDigits+0x238>
 6fa:	66 0f       	add	r22, r22
 6fc:	77 1f       	adc	r23, r23
 6fe:	0a 94       	dec	r0
 700:	e2 f7       	brpl	.-8      	; 0x6fa <displayDigits+0x234>
 702:	ac 01       	movw	r20, r24
 704:	11 96       	adiw	r26, 0x01	; 1
 706:	0c 90       	ld	r0, X
 708:	11 97       	sbiw	r26, 0x01	; 1
 70a:	02 c0       	rjmp	.+4      	; 0x710 <displayDigits+0x24a>
 70c:	44 0f       	add	r20, r20
 70e:	55 1f       	adc	r21, r21
 710:	0a 94       	dec	r0
 712:	e2 f7       	brpl	.-8      	; 0x70c <displayDigits+0x246>
 714:	46 2b       	or	r20, r22
 716:	13 96       	adiw	r26, 0x03	; 3
 718:	0c 90       	ld	r0, X
 71a:	02 c0       	rjmp	.+4      	; 0x720 <displayDigits+0x25a>
 71c:	88 0f       	add	r24, r24
 71e:	99 1f       	adc	r25, r25
 720:	0a 94       	dec	r0
 722:	e2 f7       	brpl	.-8      	; 0x71c <displayDigits+0x256>
 724:	84 2b       	or	r24, r20
 726:	80 95       	com	r24
 728:	82 23       	and	r24, r18
 72a:	85 b9       	out	0x05, r24	; 5
			break;
 72c:	08 95       	ret
		case(5):
			PORTB  |= ((1 << disp->pinA) |  (1 << disp->pinC));
 72e:	35 b1       	in	r19, 0x05	; 5
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	bc 01       	movw	r22, r24
 736:	0c 90       	ld	r0, X
 738:	02 c0       	rjmp	.+4      	; 0x73e <displayDigits+0x278>
 73a:	66 0f       	add	r22, r22
 73c:	77 1f       	adc	r23, r23
 73e:	0a 94       	dec	r0
 740:	e2 f7       	brpl	.-8      	; 0x73a <displayDigits+0x274>
 742:	ac 01       	movw	r20, r24
 744:	12 96       	adiw	r26, 0x02	; 2
 746:	0c 90       	ld	r0, X
 748:	12 97       	sbiw	r26, 0x02	; 2
 74a:	02 c0       	rjmp	.+4      	; 0x750 <displayDigits+0x28a>
 74c:	44 0f       	add	r20, r20
 74e:	55 1f       	adc	r21, r21
 750:	0a 94       	dec	r0
 752:	e2 f7       	brpl	.-8      	; 0x74c <displayDigits+0x286>
 754:	26 2f       	mov	r18, r22
 756:	24 2b       	or	r18, r20
 758:	23 2b       	or	r18, r19
 75a:	25 b9       	out	0x05, r18	; 5
			PORTB  &= ~((1 << disp->pinB) | (1 << disp->pinD));
 75c:	25 b1       	in	r18, 0x05	; 5
 75e:	ac 01       	movw	r20, r24
 760:	11 96       	adiw	r26, 0x01	; 1
 762:	0c 90       	ld	r0, X
 764:	11 97       	sbiw	r26, 0x01	; 1
 766:	02 c0       	rjmp	.+4      	; 0x76c <displayDigits+0x2a6>
 768:	44 0f       	add	r20, r20
 76a:	55 1f       	adc	r21, r21
 76c:	0a 94       	dec	r0
 76e:	e2 f7       	brpl	.-8      	; 0x768 <displayDigits+0x2a2>
 770:	13 96       	adiw	r26, 0x03	; 3
 772:	0c 90       	ld	r0, X
 774:	02 c0       	rjmp	.+4      	; 0x77a <displayDigits+0x2b4>
 776:	88 0f       	add	r24, r24
 778:	99 1f       	adc	r25, r25
 77a:	0a 94       	dec	r0
 77c:	e2 f7       	brpl	.-8      	; 0x776 <displayDigits+0x2b0>
 77e:	84 2b       	or	r24, r20
 780:	80 95       	com	r24
 782:	82 23       	and	r24, r18
 784:	85 b9       	out	0x05, r24	; 5
			break;
 786:	08 95       	ret
		case(6):
			PORTB  |= ((1 << disp->pinB) |  (1 << disp->pinC));
 788:	35 b1       	in	r19, 0x05	; 5
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	bc 01       	movw	r22, r24
 790:	11 96       	adiw	r26, 0x01	; 1
 792:	0c 90       	ld	r0, X
 794:	11 97       	sbiw	r26, 0x01	; 1
 796:	02 c0       	rjmp	.+4      	; 0x79c <displayDigits+0x2d6>
 798:	66 0f       	add	r22, r22
 79a:	77 1f       	adc	r23, r23
 79c:	0a 94       	dec	r0
 79e:	e2 f7       	brpl	.-8      	; 0x798 <displayDigits+0x2d2>
 7a0:	ac 01       	movw	r20, r24
 7a2:	12 96       	adiw	r26, 0x02	; 2
 7a4:	0c 90       	ld	r0, X
 7a6:	12 97       	sbiw	r26, 0x02	; 2
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <displayDigits+0x2e8>
 7aa:	44 0f       	add	r20, r20
 7ac:	55 1f       	adc	r21, r21
 7ae:	0a 94       	dec	r0
 7b0:	e2 f7       	brpl	.-8      	; 0x7aa <displayDigits+0x2e4>
 7b2:	26 2f       	mov	r18, r22
 7b4:	24 2b       	or	r18, r20
 7b6:	23 2b       	or	r18, r19
 7b8:	25 b9       	out	0x05, r18	; 5
			PORTB  &= ~((1 << disp->pinA) | (1 << disp->pinD));
 7ba:	25 b1       	in	r18, 0x05	; 5
 7bc:	ac 01       	movw	r20, r24
 7be:	0c 90       	ld	r0, X
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <displayDigits+0x300>
 7c2:	44 0f       	add	r20, r20
 7c4:	55 1f       	adc	r21, r21
 7c6:	0a 94       	dec	r0
 7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <displayDigits+0x2fc>
 7ca:	13 96       	adiw	r26, 0x03	; 3
 7cc:	0c 90       	ld	r0, X
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <displayDigits+0x30e>
 7d0:	88 0f       	add	r24, r24
 7d2:	99 1f       	adc	r25, r25
 7d4:	0a 94       	dec	r0
 7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <displayDigits+0x30a>
 7d8:	84 2b       	or	r24, r20
 7da:	80 95       	com	r24
 7dc:	82 23       	and	r24, r18
 7de:	85 b9       	out	0x05, r24	; 5
			break;
 7e0:	08 95       	ret
		case(7):
			PORTB  |= ((1 << disp->pinA) | (1 << disp->pinB) | (1 << disp->pinC));
 7e2:	35 b1       	in	r19, 0x05	; 5
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	bc 01       	movw	r22, r24
 7ea:	0c 90       	ld	r0, X
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <displayDigits+0x32c>
 7ee:	66 0f       	add	r22, r22
 7f0:	77 1f       	adc	r23, r23
 7f2:	0a 94       	dec	r0
 7f4:	e2 f7       	brpl	.-8      	; 0x7ee <displayDigits+0x328>
 7f6:	ac 01       	movw	r20, r24
 7f8:	11 96       	adiw	r26, 0x01	; 1
 7fa:	0c 90       	ld	r0, X
 7fc:	11 97       	sbiw	r26, 0x01	; 1
 7fe:	02 c0       	rjmp	.+4      	; 0x804 <displayDigits+0x33e>
 800:	44 0f       	add	r20, r20
 802:	55 1f       	adc	r21, r21
 804:	0a 94       	dec	r0
 806:	e2 f7       	brpl	.-8      	; 0x800 <displayDigits+0x33a>
 808:	46 2b       	or	r20, r22
 80a:	43 2b       	or	r20, r19
 80c:	9c 01       	movw	r18, r24
 80e:	12 96       	adiw	r26, 0x02	; 2
 810:	0c 90       	ld	r0, X
 812:	12 97       	sbiw	r26, 0x02	; 2
 814:	02 c0       	rjmp	.+4      	; 0x81a <displayDigits+0x354>
 816:	22 0f       	add	r18, r18
 818:	33 1f       	adc	r19, r19
 81a:	0a 94       	dec	r0
 81c:	e2 f7       	brpl	.-8      	; 0x816 <displayDigits+0x350>
 81e:	24 2b       	or	r18, r20
 820:	25 b9       	out	0x05, r18	; 5
			PORTB  &= ~((1 << disp->pinD));
 822:	25 b1       	in	r18, 0x05	; 5
 824:	13 96       	adiw	r26, 0x03	; 3
 826:	0c 90       	ld	r0, X
 828:	02 c0       	rjmp	.+4      	; 0x82e <displayDigits+0x368>
 82a:	88 0f       	add	r24, r24
 82c:	99 1f       	adc	r25, r25
 82e:	0a 94       	dec	r0
 830:	e2 f7       	brpl	.-8      	; 0x82a <displayDigits+0x364>
 832:	80 95       	com	r24
 834:	82 23       	and	r24, r18
 836:	85 b9       	out	0x05, r24	; 5
			break;
 838:	08 95       	ret
		case(8):
			PORTB  |= ((1 << disp->pinD));
 83a:	45 b1       	in	r20, 0x05	; 5
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	9c 01       	movw	r18, r24
 842:	13 96       	adiw	r26, 0x03	; 3
 844:	0c 90       	ld	r0, X
 846:	13 97       	sbiw	r26, 0x03	; 3
 848:	02 c0       	rjmp	.+4      	; 0x84e <displayDigits+0x388>
 84a:	22 0f       	add	r18, r18
 84c:	33 1f       	adc	r19, r19
 84e:	0a 94       	dec	r0
 850:	e2 f7       	brpl	.-8      	; 0x84a <displayDigits+0x384>
 852:	24 2b       	or	r18, r20
 854:	25 b9       	out	0x05, r18	; 5
			PORTB  &= ~((1 << disp->pinA) | (1 << disp->pinB) | (1 << disp->pinC));
 856:	25 b1       	in	r18, 0x05	; 5
 858:	bc 01       	movw	r22, r24
 85a:	0c 90       	ld	r0, X
 85c:	02 c0       	rjmp	.+4      	; 0x862 <displayDigits+0x39c>
 85e:	66 0f       	add	r22, r22
 860:	77 1f       	adc	r23, r23
 862:	0a 94       	dec	r0
 864:	e2 f7       	brpl	.-8      	; 0x85e <displayDigits+0x398>
 866:	ac 01       	movw	r20, r24
 868:	11 96       	adiw	r26, 0x01	; 1
 86a:	0c 90       	ld	r0, X
 86c:	11 97       	sbiw	r26, 0x01	; 1
 86e:	02 c0       	rjmp	.+4      	; 0x874 <displayDigits+0x3ae>
 870:	44 0f       	add	r20, r20
 872:	55 1f       	adc	r21, r21
 874:	0a 94       	dec	r0
 876:	e2 f7       	brpl	.-8      	; 0x870 <displayDigits+0x3aa>
 878:	46 2b       	or	r20, r22
 87a:	12 96       	adiw	r26, 0x02	; 2
 87c:	0c 90       	ld	r0, X
 87e:	02 c0       	rjmp	.+4      	; 0x884 <displayDigits+0x3be>
 880:	88 0f       	add	r24, r24
 882:	99 1f       	adc	r25, r25
 884:	0a 94       	dec	r0
 886:	e2 f7       	brpl	.-8      	; 0x880 <displayDigits+0x3ba>
 888:	84 2b       	or	r24, r20
 88a:	80 95       	com	r24
 88c:	82 23       	and	r24, r18
 88e:	85 b9       	out	0x05, r24	; 5
			break;
 890:	08 95       	ret
		case(9):			
			PORTB  |= ((1 << disp->pinA) |  (1 << disp->pinD));
 892:	35 b1       	in	r19, 0x05	; 5
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	bc 01       	movw	r22, r24
 89a:	0c 90       	ld	r0, X
 89c:	02 c0       	rjmp	.+4      	; 0x8a2 <displayDigits+0x3dc>
 89e:	66 0f       	add	r22, r22
 8a0:	77 1f       	adc	r23, r23
 8a2:	0a 94       	dec	r0
 8a4:	e2 f7       	brpl	.-8      	; 0x89e <displayDigits+0x3d8>
 8a6:	ac 01       	movw	r20, r24
 8a8:	13 96       	adiw	r26, 0x03	; 3
 8aa:	0c 90       	ld	r0, X
 8ac:	13 97       	sbiw	r26, 0x03	; 3
 8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <displayDigits+0x3ee>
 8b0:	44 0f       	add	r20, r20
 8b2:	55 1f       	adc	r21, r21
 8b4:	0a 94       	dec	r0
 8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <displayDigits+0x3ea>
 8b8:	26 2f       	mov	r18, r22
 8ba:	24 2b       	or	r18, r20
 8bc:	23 2b       	or	r18, r19
 8be:	25 b9       	out	0x05, r18	; 5
			PORTB  &= ~((1 << disp->pinB) | (1 << disp->pinC));
 8c0:	25 b1       	in	r18, 0x05	; 5
 8c2:	ac 01       	movw	r20, r24
 8c4:	11 96       	adiw	r26, 0x01	; 1
 8c6:	0c 90       	ld	r0, X
 8c8:	11 97       	sbiw	r26, 0x01	; 1
 8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <displayDigits+0x40a>
 8cc:	44 0f       	add	r20, r20
 8ce:	55 1f       	adc	r21, r21
 8d0:	0a 94       	dec	r0
 8d2:	e2 f7       	brpl	.-8      	; 0x8cc <displayDigits+0x406>
 8d4:	12 96       	adiw	r26, 0x02	; 2
 8d6:	0c 90       	ld	r0, X
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <displayDigits+0x418>
 8da:	88 0f       	add	r24, r24
 8dc:	99 1f       	adc	r25, r25
 8de:	0a 94       	dec	r0
 8e0:	e2 f7       	brpl	.-8      	; 0x8da <displayDigits+0x414>
 8e2:	84 2b       	or	r24, r20
 8e4:	80 95       	com	r24
 8e6:	82 23       	and	r24, r18
 8e8:	85 b9       	out	0x05, r24	; 5
			break;
 8ea:	08 95       	ret
		default:
			PORTB |= ((1 << disp->pinA) | (1 << disp->pinB) | (1 << disp->pinC) | (1 << disp->pinD));
 8ec:	35 b1       	in	r19, 0x05	; 5
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	bc 01       	movw	r22, r24
 8f4:	0c 90       	ld	r0, X
 8f6:	02 c0       	rjmp	.+4      	; 0x8fc <displayDigits+0x436>
 8f8:	66 0f       	add	r22, r22
 8fa:	77 1f       	adc	r23, r23
 8fc:	0a 94       	dec	r0
 8fe:	e2 f7       	brpl	.-8      	; 0x8f8 <displayDigits+0x432>
 900:	ac 01       	movw	r20, r24
 902:	11 96       	adiw	r26, 0x01	; 1
 904:	0c 90       	ld	r0, X
 906:	11 97       	sbiw	r26, 0x01	; 1
 908:	02 c0       	rjmp	.+4      	; 0x90e <__stack+0xf>
 90a:	44 0f       	add	r20, r20
 90c:	55 1f       	adc	r21, r21
 90e:	0a 94       	dec	r0
 910:	e2 f7       	brpl	.-8      	; 0x90a <__stack+0xb>
 912:	46 2b       	or	r20, r22
 914:	43 2b       	or	r20, r19
 916:	9c 01       	movw	r18, r24
 918:	12 96       	adiw	r26, 0x02	; 2
 91a:	0c 90       	ld	r0, X
 91c:	12 97       	sbiw	r26, 0x02	; 2
 91e:	02 c0       	rjmp	.+4      	; 0x924 <__stack+0x25>
 920:	22 0f       	add	r18, r18
 922:	33 1f       	adc	r19, r19
 924:	0a 94       	dec	r0
 926:	e2 f7       	brpl	.-8      	; 0x920 <__stack+0x21>
 928:	24 2b       	or	r18, r20
 92a:	13 96       	adiw	r26, 0x03	; 3
 92c:	0c 90       	ld	r0, X
 92e:	02 c0       	rjmp	.+4      	; 0x934 <__stack+0x35>
 930:	88 0f       	add	r24, r24
 932:	99 1f       	adc	r25, r25
 934:	0a 94       	dec	r0
 936:	e2 f7       	brpl	.-8      	; 0x930 <__stack+0x31>
 938:	82 2b       	or	r24, r18
 93a:	85 b9       	out	0x05, r24	; 5
 93c:	08 95       	ret

0000093e <countValueUp>:
			break;
	}
}

void countValueUp(sSegPtr_t disp){
 93e:	fc 01       	movw	r30, r24
	if (disp->digitValue1 == 9 && disp->digitValue0 == 9) {
 940:	87 81       	ldd	r24, Z+7	; 0x07
 942:	89 30       	cpi	r24, 0x09	; 9
 944:	31 f4       	brne	.+12     	; 0x952 <countValueUp+0x14>
 946:	96 81       	ldd	r25, Z+6	; 0x06
 948:	99 30       	cpi	r25, 0x09	; 9
 94a:	51 f4       	brne	.+20     	; 0x960 <countValueUp+0x22>
		disp->digitValue1 = 0;
 94c:	17 82       	std	Z+7, r1	; 0x07
		disp->digitValue0 = 0;
 94e:	16 82       	std	Z+6, r1	; 0x06
 950:	08 95       	ret
	}
	else if(disp->digitValue0 == 9){
 952:	96 81       	ldd	r25, Z+6	; 0x06
 954:	99 30       	cpi	r25, 0x09	; 9
 956:	21 f4       	brne	.+8      	; 0x960 <countValueUp+0x22>
		disp->digitValue1 ++;
 958:	8f 5f       	subi	r24, 0xFF	; 255
 95a:	87 83       	std	Z+7, r24	; 0x07
		disp->digitValue0 = 0;
 95c:	16 82       	std	Z+6, r1	; 0x06
 95e:	08 95       	ret
	}
	else disp->digitValue0++;
 960:	9f 5f       	subi	r25, 0xFF	; 255
 962:	96 83       	std	Z+6, r25	; 0x06
 964:	08 95       	ret

00000966 <setValue>:
}

void setValue(int setValue1, int setValue0, sSegPtr_t disp) {
	disp->digitValue1 = setValue1;
 966:	fa 01       	movw	r30, r20
 968:	87 83       	std	Z+7, r24	; 0x07
	disp->digitValue0 = setValue0;
 96a:	66 83       	std	Z+6, r22	; 0x06
 96c:	08 95       	ret

0000096e <__tablejump2__>:
 96e:	ee 0f       	add	r30, r30
 970:	ff 1f       	adc	r31, r31
 972:	05 90       	lpm	r0, Z+
 974:	f4 91       	lpm	r31, Z
 976:	e0 2d       	mov	r30, r0
 978:	09 94       	ijmp

0000097a <_exit>:
 97a:	f8 94       	cli

0000097c <__stop_program>:
 97c:	ff cf       	rjmp	.-2      	; 0x97c <__stop_program>
