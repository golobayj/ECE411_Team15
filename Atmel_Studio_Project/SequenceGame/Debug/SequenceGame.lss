
SequenceGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000ba0  00000c34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ba0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080010a  0080010a  00000c3e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012e2  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f6  00000000  00000000  00002032  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a1d  00000000  00000000  00002928  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  00003348  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b5  00000000  00000000  00003524  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aeb  00000000  00000000  00003ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000045c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  10:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  14:	0c 94 14 03 	jmp	0x628	; 0x628 <__vector_5>
  18:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  1c:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__vector_7>
  20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  24:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  2c:	0c 94 02 03 	jmp	0x604	; 0x604 <__vector_11>
  30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  4c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  54:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  58:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  5c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  60:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  68:	ce 00       	.word	0x00ce	; ????
  6a:	d5 00       	.word	0x00d5	; ????
  6c:	dd 00       	.word	0x00dd	; ????
  6e:	e5 00       	.word	0x00e5	; ????
  70:	ed 00       	.word	0x00ed	; ????
  72:	f5 00       	.word	0x00f5	; ????
  74:	fd 00       	.word	0x00fd	; ????
  76:	d2 03       	fmuls	r21, r18
  78:	fd 03       	fmulsu	r23, r21
  7a:	29 04       	cpc	r2, r9
  7c:	55 04       	cpc	r5, r5
  7e:	82 04       	cpc	r8, r2
  80:	ae 04       	cpc	r10, r14
  82:	db 04       	cpc	r13, r11
  84:	08 05       	cpc	r16, r8
  86:	34 05       	cpc	r19, r4
  88:	60 05       	cpc	r22, r0

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
  96:	11 e0       	ldi	r17, 0x01	; 1
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	e0 ea       	ldi	r30, 0xA0	; 160
  9e:	fb e0       	ldi	r31, 0x0B	; 11
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
  a2:	05 90       	lpm	r0, Z+
  a4:	0d 92       	st	X+, r0
  a6:	aa 30       	cpi	r26, 0x0A	; 10
  a8:	b1 07       	cpc	r27, r17
  aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	aa e0       	ldi	r26, 0x0A	; 10
  b0:	b1 e0       	ldi	r27, 0x01	; 1
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
  b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
  b6:	a5 31       	cpi	r26, 0x15	; 21
  b8:	b2 07       	cpc	r27, r18
  ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
  bc:	0e 94 df 01 	call	0x3be	; 0x3be <main>
  c0:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <_exit>

000000c4 <__bad_interrupt>:
  c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <seedSequence>:
			break;
	}
}


void seedSequence(uint8_t *seed){
  c8:	dc 01       	movw	r26, r24
	*seed = 1;
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	8c 93       	st	X, r24
	uint8_t ADCval;

	ADMUX = 5;         // use ADC5
  ce:	ec e7       	ldi	r30, 0x7C	; 124
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	85 e0       	ldi	r24, 0x05	; 5
  d4:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0);    // use AVcc as the reference
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24
	ADMUX &= ~(1 << ADLAR);   // clear for 10 bit resolution
  dc:	80 81       	ld	r24, Z
  de:	8f 7d       	andi	r24, 0xDF	; 223
  e0:	80 83       	st	Z, r24
		
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);    // 128 prescale 
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	90 81       	ld	r25, Z
  e8:	97 60       	ori	r25, 0x07	; 7
  ea:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADEN);    // Enable the ADC
  ec:	90 81       	ld	r25, Z
  ee:	90 68       	ori	r25, 0x80	; 128
  f0:	90 83       	st	Z, r25

	ADCSRA |= (1 << ADSC);    // Start the ADC conversion
  f2:	90 81       	ld	r25, Z
  f4:	90 64       	ori	r25, 0x40	; 64
  f6:	90 83       	st	Z, r25

	while(ADCSRA & (1 << ADSC));      // Waits for ADC to finish conversion
  f8:	90 81       	ld	r25, Z
  fa:	96 fd       	sbrc	r25, 6
  fc:	fd cf       	rjmp	.-6      	; 0xf8 <seedSequence+0x30>

	ADCval = ADCL;
  fe:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	ADCval = (ADCH << 8) + ADCval;    // ADCH is read so ADC can be updated again
 102:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	ADCSRA &= ~(1 << ADEN);  //disable the ADC
 106:	ea e7       	ldi	r30, 0x7A	; 122
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	90 81       	ld	r25, Z
 10c:	9f 77       	andi	r25, 0x7F	; 127
 10e:	90 83       	st	Z, r25
	*seed = ADCval;
 110:	8c 93       	st	X, r24
 112:	08 95       	ret

00000114 <generateSequence>:
}

void generateSequence(uint8_t length, uint8_t *seed){
 114:	db 01       	movw	r26, r22
	for(int i=0; i<length; i++) {
 116:	88 23       	and	r24, r24
 118:	31 f1       	breq	.+76     	; 0x166 <generateSequence+0x52>
 11a:	e0 e1       	ldi	r30, 0x10	; 16
 11c:	f1 e0       	ldi	r31, 0x01	; 1
 11e:	48 2f       	mov	r20, r24
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	40 5f       	subi	r20, 0xF0	; 240
 124:	5e 4f       	sbci	r21, 0xFE	; 254
		*seed ^= (*seed << 7);
		*seed ^= (*seed >> 5);
		*seed ^= (*seed << 3);
		randomSequence[i] = *seed % 6;
 126:	6b ea       	ldi	r22, 0xAB	; 171
	*seed = ADCval;
}

void generateSequence(uint8_t length, uint8_t *seed){
	for(int i=0; i<length; i++) {
		*seed ^= (*seed << 7);
 128:	9c 91       	ld	r25, X
 12a:	80 e8       	ldi	r24, 0x80	; 128
 12c:	98 9f       	mul	r25, r24
 12e:	90 01       	movw	r18, r0
 130:	11 24       	eor	r1, r1
 132:	29 27       	eor	r18, r25
		*seed ^= (*seed >> 5);
 134:	82 2f       	mov	r24, r18
 136:	82 95       	swap	r24
 138:	86 95       	lsr	r24
 13a:	87 70       	andi	r24, 0x07	; 7
 13c:	28 27       	eor	r18, r24
		*seed ^= (*seed << 3);
 13e:	82 2f       	mov	r24, r18
 140:	88 0f       	add	r24, r24
 142:	88 0f       	add	r24, r24
 144:	88 0f       	add	r24, r24
 146:	28 27       	eor	r18, r24
 148:	2c 93       	st	X, r18
		randomSequence[i] = *seed % 6;
 14a:	26 9f       	mul	r18, r22
 14c:	91 2d       	mov	r25, r1
 14e:	11 24       	eor	r1, r1
 150:	96 95       	lsr	r25
 152:	96 95       	lsr	r25
 154:	89 2f       	mov	r24, r25
 156:	88 0f       	add	r24, r24
 158:	98 0f       	add	r25, r24
 15a:	99 0f       	add	r25, r25
 15c:	29 1b       	sub	r18, r25
 15e:	21 93       	st	Z+, r18
	ADCSRA &= ~(1 << ADEN);  //disable the ADC
	*seed = ADCval;
}

void generateSequence(uint8_t length, uint8_t *seed){
	for(int i=0; i<length; i++) {
 160:	e4 17       	cp	r30, r20
 162:	f5 07       	cpc	r31, r21
 164:	09 f7       	brne	.-62     	; 0x128 <generateSequence+0x14>
 166:	08 95       	ret

00000168 <toneOn>:
	}
}

void toneOn(uint8_t count)
{	
	OCR1A = count;
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 16e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 |= (1 << OCIE1A);
 172:	ef e6       	ldi	r30, 0x6F	; 111
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	82 60       	ori	r24, 0x02	; 2
 17a:	80 83       	st	Z, r24
 17c:	08 95       	ret

0000017e <toneOff>:
}

void toneOff(void)
{
	// disable timer1 interrupts to stop tone
	TIMSK1 &= (~1 << OCIE1A);
 17e:	ef e6       	ldi	r30, 0x6F	; 111
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	8c 7f       	andi	r24, 0xFC	; 252
 186:	80 83       	st	Z, r24
 188:	08 95       	ret

0000018a <driveOutput>:
	return playSequence;
}


void driveOutput(enum color col) {
	switch (col) {
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	87 30       	cpi	r24, 0x07	; 7
 18e:	91 05       	cpc	r25, r1
 190:	c8 f5       	brcc	.+114    	; 0x204 <driveOutput+0x7a>
 192:	fc 01       	movw	r30, r24
 194:	ec 5c       	subi	r30, 0xCC	; 204
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <__tablejump2__>
		case(PURPLE):	// 000
			toneOn(0x80);
 19c:	80 e8       	ldi	r24, 0x80	; 128
 19e:	0e 94 b4 00 	call	0x168	; 0x168 <toneOn>
			PORTC  &= ~((1 << ledC) | (1 << ledB) | (1 << ledA));
 1a2:	88 b1       	in	r24, 0x08	; 8
 1a4:	88 7f       	andi	r24, 0xF8	; 248
 1a6:	88 b9       	out	0x08, r24	; 8
			break;
 1a8:	08 95       	ret
		case(YELLOW):	// 001
			toneOn(0x70);
 1aa:	80 e7       	ldi	r24, 0x70	; 112
 1ac:	0e 94 b4 00 	call	0x168	; 0x168 <toneOn>
			PORTC  |= (1 << ledA);
 1b0:	40 9a       	sbi	0x08, 0	; 8
			PORTC  &= ~((1 << ledB) | (1 << ledC));
 1b2:	88 b1       	in	r24, 0x08	; 8
 1b4:	89 7f       	andi	r24, 0xF9	; 249
 1b6:	88 b9       	out	0x08, r24	; 8
			break;
 1b8:	08 95       	ret
		case(RED):		// 010
			toneOn(0x60);
 1ba:	80 e6       	ldi	r24, 0x60	; 96
 1bc:	0e 94 b4 00 	call	0x168	; 0x168 <toneOn>
			PORTC  |= (1 << ledB);
 1c0:	41 9a       	sbi	0x08, 1	; 8
			PORTC  &= ~((1 << ledC) | (1 << ledA));
 1c2:	88 b1       	in	r24, 0x08	; 8
 1c4:	8a 7f       	andi	r24, 0xFA	; 250
 1c6:	88 b9       	out	0x08, r24	; 8
			break;
 1c8:	08 95       	ret
		case(BLUE):		// 011
			toneOn(0x50);
 1ca:	80 e5       	ldi	r24, 0x50	; 80
 1cc:	0e 94 b4 00 	call	0x168	; 0x168 <toneOn>
			PORTC  |= ((1 << ledB) | (1 << ledA));
 1d0:	88 b1       	in	r24, 0x08	; 8
 1d2:	83 60       	ori	r24, 0x03	; 3
 1d4:	88 b9       	out	0x08, r24	; 8
			PORTC  &= ~(1 << ledC);
 1d6:	42 98       	cbi	0x08, 2	; 8
			break;
 1d8:	08 95       	ret
		case(GREEN):	// 100
			toneOn(0x40);
 1da:	80 e4       	ldi	r24, 0x40	; 64
 1dc:	0e 94 b4 00 	call	0x168	; 0x168 <toneOn>
			PORTC  |= (1 << ledC) ;
 1e0:	42 9a       	sbi	0x08, 2	; 8
			PORTC  &= ~((1 << ledB) | (1 << ledA));
 1e2:	88 b1       	in	r24, 0x08	; 8
 1e4:	8c 7f       	andi	r24, 0xFC	; 252
 1e6:	88 b9       	out	0x08, r24	; 8
			break;
 1e8:	08 95       	ret
		case(ORANGE):	// 101
			toneOn(0x30);
 1ea:	80 e3       	ldi	r24, 0x30	; 48
 1ec:	0e 94 b4 00 	call	0x168	; 0x168 <toneOn>
			PORTC  |= ((1 << ledC) | (1 << ledA));
 1f0:	88 b1       	in	r24, 0x08	; 8
 1f2:	85 60       	ori	r24, 0x05	; 5
 1f4:	88 b9       	out	0x08, r24	; 8
			PORTC  &= ~(1 << ledB);
 1f6:	41 98       	cbi	0x08, 1	; 8
			break;
 1f8:	08 95       	ret
		case(OFF):		// 111
			PORTC  |= ((1 << ledC) | (1 << ledB) | (1 << ledA));
 1fa:	88 b1       	in	r24, 0x08	; 8
 1fc:	87 60       	ori	r24, 0x07	; 7
 1fe:	88 b9       	out	0x08, r24	; 8
			toneOff();
 200:	0e 94 bf 00 	call	0x17e	; 0x17e <toneOff>
 204:	08 95       	ret

00000206 <displaySequence>:
	
	
}


void displaySequence(int length, uint8_t sequence[]){
 206:	0f 93       	push	r16
 208:	1f 93       	push	r17
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
	//loop through and display length of sequence
	for(int i=0; i < length; i++){
 20e:	18 16       	cp	r1, r24
 210:	19 06       	cpc	r1, r25
 212:	fc f4       	brge	.+62     	; 0x252 <displaySequence+0x4c>
 214:	eb 01       	movw	r28, r22
 216:	8b 01       	movw	r16, r22
 218:	08 0f       	add	r16, r24
 21a:	19 1f       	adc	r17, r25
		driveOutput(OFF);
 21c:	86 e0       	ldi	r24, 0x06	; 6
 21e:	0e 94 c5 00 	call	0x18a	; 0x18a <driveOutput>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 222:	2f ef       	ldi	r18, 0xFF	; 255
 224:	81 ee       	ldi	r24, 0xE1	; 225
 226:	94 e0       	ldi	r25, 0x04	; 4
 228:	21 50       	subi	r18, 0x01	; 1
 22a:	80 40       	sbci	r24, 0x00	; 0
 22c:	90 40       	sbci	r25, 0x00	; 0
 22e:	e1 f7       	brne	.-8      	; 0x228 <displaySequence+0x22>
 230:	00 c0       	rjmp	.+0      	; 0x232 <displaySequence+0x2c>
 232:	00 00       	nop
		_delay_ms(100);
		driveOutput(sequence[i]);
 234:	89 91       	ld	r24, Y+
 236:	0e 94 c5 00 	call	0x18a	; 0x18a <driveOutput>
 23a:	2f ef       	ldi	r18, 0xFF	; 255
 23c:	83 ed       	ldi	r24, 0xD3	; 211
 23e:	90 e3       	ldi	r25, 0x30	; 48
 240:	21 50       	subi	r18, 0x01	; 1
 242:	80 40       	sbci	r24, 0x00	; 0
 244:	90 40       	sbci	r25, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <displaySequence+0x3a>
 248:	00 c0       	rjmp	.+0      	; 0x24a <displaySequence+0x44>
 24a:	00 00       	nop
}


void displaySequence(int length, uint8_t sequence[]){
	//loop through and display length of sequence
	for(int i=0; i < length; i++){
 24c:	c0 17       	cp	r28, r16
 24e:	d1 07       	cpc	r29, r17
 250:	29 f7       	brne	.-54     	; 0x21c <displaySequence+0x16>
		driveOutput(OFF);
		_delay_ms(100);
		driveOutput(sequence[i]);
		_delay_ms(1000);
	}
	driveOutput(OFF);
 252:	86 e0       	ldi	r24, 0x06	; 6
 254:	0e 94 c5 00 	call	0x18a	; 0x18a <driveOutput>
 258:	2f ef       	ldi	r18, 0xFF	; 255
 25a:	81 ee       	ldi	r24, 0xE1	; 225
 25c:	94 e0       	ldi	r25, 0x04	; 4
 25e:	21 50       	subi	r18, 0x01	; 1
 260:	80 40       	sbci	r24, 0x00	; 0
 262:	90 40       	sbci	r25, 0x00	; 0
 264:	e1 f7       	brne	.-8      	; 0x25e <displaySequence+0x58>
 266:	00 c0       	rjmp	.+0      	; 0x268 <displaySequence+0x62>
 268:	00 00       	nop
	_delay_ms(100);
}
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	08 95       	ret

00000274 <acceptInput>:

enum state acceptInput(uint8_t length){
 274:	ff 92       	push	r15
 276:	0f 93       	push	r16
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
	
	inputCounter = 0;
 27e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
	uint8_t i = 0;

	while(i < length) {
 282:	88 23       	and	r24, r24
 284:	09 f4       	brne	.+2      	; 0x288 <acceptInput+0x14>
 286:	87 c0       	rjmp	.+270    	; 0x396 <acceptInput+0x122>
 288:	f8 2e       	mov	r15, r24
 28a:	00 e0       	ldi	r16, 0x00	; 0
		lastInput = OFF;
 28c:	16 e0       	ldi	r17, 0x06	; 6
 28e:	10 93 0c 01 	sts	0x010C, r17	; 0x80010c <lastInput>
		while(inputCounter <= 20) {
			_delay_ms(100);  // 100 works good here for play, 1000 for testing
			inputCounter++;
			//setDisplayValue(inputCounter, &disp);
			if(lastInput == randomSequence[i]){
 292:	c0 2f       	mov	r28, r16
 294:	d0 e0       	ldi	r29, 0x00	; 0
 296:	c0 5f       	subi	r28, 0xF0	; 240
 298:	de 4f       	sbci	r29, 0xFE	; 254
	inputCounter = 0;
	uint8_t i = 0;

	while(i < length) {
		lastInput = OFF;
		while(inputCounter <= 20) {
 29a:	73 c0       	rjmp	.+230    	; 0x382 <acceptInput+0x10e>
 29c:	2f ef       	ldi	r18, 0xFF	; 255
 29e:	81 ee       	ldi	r24, 0xE1	; 225
 2a0:	94 e0       	ldi	r25, 0x04	; 4
 2a2:	21 50       	subi	r18, 0x01	; 1
 2a4:	80 40       	sbci	r24, 0x00	; 0
 2a6:	90 40       	sbci	r25, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <acceptInput+0x2e>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <acceptInput+0x38>
 2ac:	00 00       	nop
			_delay_ms(100);  // 100 works good here for play, 1000 for testing
			inputCounter++;
 2ae:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__data_end>
 2b2:	9f 5f       	subi	r25, 0xFF	; 255
 2b4:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <__data_end>
			//setDisplayValue(inputCounter, &disp);
			if(lastInput == randomSequence[i]){
 2b8:	98 81       	ld	r25, Y
 2ba:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <lastInput>
 2be:	92 13       	cpse	r25, r18
 2c0:	4c c0       	rjmp	.+152    	; 0x35a <acceptInput+0xe6>
				inputCounter=0;
 2c2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
				i++;
 2c6:	0f 5f       	subi	r16, 0xFF	; 255
 2c8:	2f ef       	ldi	r18, 0xFF	; 255
 2ca:	81 ee       	ldi	r24, 0xE1	; 225
 2cc:	94 e0       	ldi	r25, 0x04	; 4
 2ce:	21 50       	subi	r18, 0x01	; 1
 2d0:	80 40       	sbci	r24, 0x00	; 0
 2d2:	90 40       	sbci	r25, 0x00	; 0
 2d4:	e1 f7       	brne	.-8      	; 0x2ce <acceptInput+0x5a>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <acceptInput+0x64>
 2d8:	00 00       	nop
				_delay_ms(100);
				if(length == MAX_SEQ_LENGTH  && i == length) {
 2da:	25 e0       	ldi	r18, 0x05	; 5
 2dc:	f2 12       	cpse	r15, r18
 2de:	1f c0       	rjmp	.+62     	; 0x31e <acceptInput+0xaa>
 2e0:	05 30       	cpi	r16, 0x05	; 5
 2e2:	09 f0       	breq	.+2      	; 0x2e6 <acceptInput+0x72>
 2e4:	53 c0       	rjmp	.+166    	; 0x38c <acceptInput+0x118>
					roundCount++;
 2e6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <roundCount>
 2ea:	8f 5f       	subi	r24, 0xFF	; 255
 2ec:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <roundCount>
 2f0:	8f ef       	ldi	r24, 0xFF	; 255
 2f2:	93 ed       	ldi	r25, 0xD3	; 211
 2f4:	20 e3       	ldi	r18, 0x30	; 48
 2f6:	81 50       	subi	r24, 0x01	; 1
 2f8:	90 40       	sbci	r25, 0x00	; 0
 2fa:	20 40       	sbci	r18, 0x00	; 0
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <acceptInput+0x82>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <acceptInput+0x8c>
 300:	00 00       	nop
					_delay_ms(1000);
					driveOutput(OFF);
 302:	86 e0       	ldi	r24, 0x06	; 6
 304:	0e 94 c5 00 	call	0x18a	; 0x18a <driveOutput>
 308:	8f ef       	ldi	r24, 0xFF	; 255
 30a:	93 ed       	ldi	r25, 0xD3	; 211
 30c:	20 e3       	ldi	r18, 0x30	; 48
 30e:	81 50       	subi	r24, 0x01	; 1
 310:	90 40       	sbci	r25, 0x00	; 0
 312:	20 40       	sbci	r18, 0x00	; 0
 314:	e1 f7       	brne	.-8      	; 0x30e <acceptInput+0x9a>
 316:	00 c0       	rjmp	.+0      	; 0x318 <acceptInput+0xa4>
 318:	00 00       	nop
					_delay_ms(1000);
					return win;
 31a:	84 e0       	ldi	r24, 0x04	; 4
 31c:	4a c0       	rjmp	.+148    	; 0x3b2 <acceptInput+0x13e>
				}
				if(i == length) {
 31e:	f0 12       	cpse	r15, r16
 320:	35 c0       	rjmp	.+106    	; 0x38c <acceptInput+0x118>
					roundCount++;
 322:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <roundCount>
 326:	8f 5f       	subi	r24, 0xFF	; 255
 328:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <roundCount>
 32c:	8f ef       	ldi	r24, 0xFF	; 255
 32e:	93 ed       	ldi	r25, 0xD3	; 211
 330:	20 e3       	ldi	r18, 0x30	; 48
 332:	81 50       	subi	r24, 0x01	; 1
 334:	90 40       	sbci	r25, 0x00	; 0
 336:	20 40       	sbci	r18, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <acceptInput+0xbe>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <acceptInput+0xc8>
 33c:	00 00       	nop
					_delay_ms(1000);
					driveOutput(OFF);
 33e:	86 e0       	ldi	r24, 0x06	; 6
 340:	0e 94 c5 00 	call	0x18a	; 0x18a <driveOutput>
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	93 ed       	ldi	r25, 0xD3	; 211
 348:	20 e3       	ldi	r18, 0x30	; 48
 34a:	81 50       	subi	r24, 0x01	; 1
 34c:	90 40       	sbci	r25, 0x00	; 0
 34e:	20 40       	sbci	r18, 0x00	; 0
 350:	e1 f7       	brne	.-8      	; 0x34a <acceptInput+0xd6>
 352:	00 c0       	rjmp	.+0      	; 0x354 <acceptInput+0xe0>
 354:	00 00       	nop
					_delay_ms(1000);
					return playSequence;
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	2c c0       	rjmp	.+88     	; 0x3b2 <acceptInput+0x13e>
				}
				break;
			}
			else if(inputCounter == 5) driveOutput(OFF);
 35a:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
 35e:	25 30       	cpi	r18, 0x05	; 5
 360:	21 f4       	brne	.+8      	; 0x36a <acceptInput+0xf6>
 362:	81 2f       	mov	r24, r17
 364:	0e 94 c5 00 	call	0x18a	; 0x18a <driveOutput>
 368:	0c c0       	rjmp	.+24     	; 0x382 <acceptInput+0x10e>
			else if(inputCounter >= 20) return lose;
 36a:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
 36e:	24 31       	cpi	r18, 0x14	; 20
 370:	e8 f4       	brcc	.+58     	; 0x3ac <acceptInput+0x138>
			else if(lastInput != randomSequence[i] && lastInput != OFF) return lose;
 372:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <lastInput>
 376:	92 17       	cp	r25, r18
 378:	21 f0       	breq	.+8      	; 0x382 <acceptInput+0x10e>
 37a:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <lastInput>
 37e:	96 30       	cpi	r25, 0x06	; 6
 380:	b9 f4       	brne	.+46     	; 0x3b0 <acceptInput+0x13c>
	inputCounter = 0;
	uint8_t i = 0;

	while(i < length) {
		lastInput = OFF;
		while(inputCounter <= 20) {
 382:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__data_end>
 386:	95 31       	cpi	r25, 0x15	; 21
 388:	08 f4       	brcc	.+2      	; 0x38c <acceptInput+0x118>
 38a:	88 cf       	rjmp	.-240    	; 0x29c <acceptInput+0x28>
			}
			else if(inputCounter == 5) driveOutput(OFF);
			else if(inputCounter >= 20) return lose;
			else if(lastInput != randomSequence[i] && lastInput != OFF) return lose;
		}
		inputCounter=0;
 38c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
enum state acceptInput(uint8_t length){
	
	inputCounter = 0;
	uint8_t i = 0;

	while(i < length) {
 390:	0f 15       	cp	r16, r15
 392:	08 f4       	brcc	.+2      	; 0x396 <acceptInput+0x122>
 394:	7c cf       	rjmp	.-264    	; 0x28e <acceptInput+0x1a>
 396:	8f ef       	ldi	r24, 0xFF	; 255
 398:	99 e6       	ldi	r25, 0x69	; 105
 39a:	28 e1       	ldi	r18, 0x18	; 24
 39c:	81 50       	subi	r24, 0x01	; 1
 39e:	90 40       	sbci	r25, 0x00	; 0
 3a0:	20 40       	sbci	r18, 0x00	; 0
 3a2:	e1 f7       	brne	.-8      	; 0x39c <acceptInput+0x128>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <acceptInput+0x132>
 3a6:	00 00       	nop
			else if(lastInput != randomSequence[i] && lastInput != OFF) return lose;
		}
		inputCounter=0;
	}
	_delay_ms(500);
	return playSequence;
 3a8:	82 e0       	ldi	r24, 0x02	; 2
 3aa:	03 c0       	rjmp	.+6      	; 0x3b2 <acceptInput+0x13e>
					return playSequence;
				}
				break;
			}
			else if(inputCounter == 5) driveOutput(OFF);
			else if(inputCounter >= 20) return lose;
 3ac:	85 e0       	ldi	r24, 0x05	; 5
 3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <acceptInput+0x13e>
			else if(lastInput != randomSequence[i] && lastInput != OFF) return lose;
 3b0:	85 e0       	ldi	r24, 0x05	; 5
		}
		inputCounter=0;
	}
	_delay_ms(500);
	return playSequence;
}
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	1f 91       	pop	r17
 3b8:	0f 91       	pop	r16
 3ba:	ff 90       	pop	r15
 3bc:	08 95       	ret

000003be <main>:
void toneOff(void);

int main(void)
{	
	// setup speaker as output
	DDRB |= (1 << speaker);
 3be:	21 9a       	sbi	0x04, 1	; 4
	
	// setup timer 1 for speaker
	TCCR1A = 0x00; // Normal operation
 3c0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1<<CS11)|(1<<CS10)|(1<<WGM12)|(1<<ICNC1); // 256x prescaler, MODE 4
 3c4:	8b e8       	ldi	r24, 0x8B	; 139
 3c6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TCCR1C = 0x80;
 3ca:	80 e8       	ldi	r24, 0x80	; 128
 3cc:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>

	// Setup seven segment display outputs
	DDRC |= (1 << digit0) | (1 << digit1);
 3d0:	87 b1       	in	r24, 0x07	; 7
 3d2:	88 61       	ori	r24, 0x18	; 24
 3d4:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1 << sSegA) | (1 << sSegB) | (1 << sSegC) | (1 << sSegD);
 3d6:	84 b1       	in	r24, 0x04	; 4
 3d8:	8c 63       	ori	r24, 0x3C	; 60
 3da:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << sSegA) | (1 << sSegB) | (1 << sSegC) | (1 << sSegD);
 3dc:	85 b1       	in	r24, 0x05	; 5
 3de:	8c 63       	ori	r24, 0x3C	; 60
 3e0:	85 b9       	out	0x05, r24	; 5

	// setup timer 2 for seven segment time division multiplexing
	TCCR2A = 0b00000010;
 3e2:	82 e0       	ldi	r24, 0x02	; 2
 3e4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B = 0b00000101;
 3e8:	95 e0       	ldi	r25, 0x05	; 5
 3ea:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	TIMSK2 = 0b00000010;
 3ee:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	OCR2A = 0b01000100;
 3f2:	84 e4       	ldi	r24, 0x44	; 68
 3f4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		
	// setup buttons as inputs with pull-ups
	DDRD &= ~(1 << buttonPur) | ~(1 << buttonYel) | ~(1 << buttonRed) | ~(1 << buttonBlu) | ~(1 << buttonGre) | ~(1 << buttonOra);
 3f8:	8a b1       	in	r24, 0x0a	; 10
 3fa:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << buttonPur) | (1 << buttonYel) | (1 << buttonRed) | (1 << buttonBlu) | (1 << buttonGre) | (1 << buttonOra);
 3fc:	8b b1       	in	r24, 0x0b	; 11
 3fe:	8c 6f       	ori	r24, 0xFC	; 252
 400:	8b b9       	out	0x0b, r24	; 11

	// enable button interrupts
	PCMSK2 |= (1 << PCINT18) | (1 << PCINT19) | (1 << PCINT20) | (1 << PCINT21) | (1 << PCINT22) | (1 << PCINT23);
 402:	ed e6       	ldi	r30, 0x6D	; 109
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	8c 6f       	ori	r24, 0xFC	; 252
 40a:	80 83       	st	Z, r24
	
	// LED SETUP
	// setup led decoder outputs
	DDRC |= (1 << ledA) | (1 << ledB) | (1 << ledC);
 40c:	87 b1       	in	r24, 0x07	; 7
 40e:	87 60       	ori	r24, 0x07	; 7
 410:	87 b9       	out	0x07, r24	; 7
		
	// enable global interrupts
	sei();
 412:	78 94       	sei
	
	//seed random sequence generator at power on
	seedSequence(randomSeedPtr);
 414:	8f e0       	ldi	r24, 0x0F	; 15
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	0e 94 64 00 	call	0xc8	; 0xc8 <seedSequence>
			setDisplayValue(roundCount,&disp);
			toneOff();
		}
		while (gameState == start) {
			generateSequence(MAX_SEQ_LENGTH, randomSeedPtr);
			gameState = playSequence;
 41c:	02 e0       	ldi	r16, 0x02	; 2
				_delay_ms(200);
			}
			gameState = idle;
		}
		while (gameState == lose) {
			TCCR1A = 0x03; 
 41e:	68 94       	set
 420:	ee 24       	eor	r14, r14
 422:	e7 f8       	bld	r14, 7
 424:	f1 2c       	mov	r15, r1
 426:	13 e0       	ldi	r17, 0x03	; 3
			displaySequence(roundCount+1, randomSequence);
			gameState = inputSequence;
		}
		while (gameState == inputSequence) {
			//enable button interrupts
			PCICR |= (1 << PCIE2);
 428:	0f 2e       	mov	r0, r31
 42a:	f8 e6       	ldi	r31, 0x68	; 104
 42c:	cf 2e       	mov	r12, r31
 42e:	d1 2c       	mov	r13, r1
 430:	f0 2d       	mov	r31, r0
 432:	11 c0       	rjmp	.+34     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	seedSequence(randomSeedPtr);
	
	while (1)
	{	
		while (gameState == idle) {
			roundCount = 0;
 434:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <roundCount>
			//enable button interrupts
			PCICR |= (1 << PCIE2);
 438:	f6 01       	movw	r30, r12
 43a:	80 81       	ld	r24, Z
 43c:	84 60       	ori	r24, 0x04	; 4
 43e:	80 83       	st	Z, r24
			driveOutput(OFF);
 440:	86 e0       	ldi	r24, 0x06	; 6
 442:	0e 94 c5 00 	call	0x18a	; 0x18a <driveOutput>
			setDisplayValue(roundCount,&disp);
 446:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <roundCount>
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	71 e0       	ldi	r23, 0x01	; 1
 44e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <setDisplayValue>
			toneOff();
 452:	0e 94 bf 00 	call	0x17e	; 0x17e <toneOff>
	//seed random sequence generator at power on
	seedSequence(randomSeedPtr);
	
	while (1)
	{	
		while (gameState == idle) {
 456:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <gameState>
 45a:	88 23       	and	r24, r24
 45c:	59 f3       	breq	.-42     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
			PCICR |= (1 << PCIE2);
			driveOutput(OFF);
			setDisplayValue(roundCount,&disp);
			toneOff();
		}
		while (gameState == start) {
 45e:	81 30       	cpi	r24, 0x01	; 1
 460:	09 f4       	brne	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 462:	a2 c0       	rjmp	.+324    	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
			generateSequence(MAX_SEQ_LENGTH, randomSeedPtr);
			gameState = playSequence;
		}
		while (gameState == playSequence) {
 464:	82 30       	cpi	r24, 0x02	; 2
 466:	a9 f4       	brne	.+42     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
			//disable button interrupts
			PCICR &= ~(1 << PCIE2);
 468:	f6 01       	movw	r30, r12
 46a:	80 81       	ld	r24, Z
 46c:	8b 7f       	andi	r24, 0xFB	; 251
 46e:	80 83       	st	Z, r24
			setDisplayValue(roundCount,&disp);
 470:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <roundCount>
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	71 e0       	ldi	r23, 0x01	; 1
 478:	0e 94 b6 05 	call	0xb6c	; 0xb6c <setDisplayValue>
			displaySequence(roundCount+1, randomSequence);
 47c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <roundCount>
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	60 e1       	ldi	r22, 0x10	; 16
 484:	71 e0       	ldi	r23, 0x01	; 1
 486:	01 96       	adiw	r24, 0x01	; 1
 488:	0e 94 03 01 	call	0x206	; 0x206 <displaySequence>
			gameState = inputSequence;
 48c:	10 93 0e 01 	sts	0x010E, r17	; 0x80010e <gameState>
 490:	02 c0       	rjmp	.+4      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
		}
		while (gameState == inputSequence) {
 492:	83 30       	cpi	r24, 0x03	; 3
 494:	69 f4       	brne	.+26     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
			//enable button interrupts
			PCICR |= (1 << PCIE2);
 496:	f6 01       	movw	r30, r12
 498:	80 81       	ld	r24, Z
 49a:	84 60       	ori	r24, 0x04	; 4
 49c:	80 83       	st	Z, r24
			gameState = acceptInput(roundCount+1);
 49e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <roundCount>
 4a2:	8f 5f       	subi	r24, 0xFF	; 255
 4a4:	0e 94 3a 01 	call	0x274	; 0x274 <acceptInput>
 4a8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <gameState>
			PCICR &= ~(1 << PCIE2);
			setDisplayValue(roundCount,&disp);
			displaySequence(roundCount+1, randomSequence);
			gameState = inputSequence;
		}
		while (gameState == inputSequence) {
 4ac:	83 30       	cpi	r24, 0x03	; 3
 4ae:	99 f3       	breq	.-26     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
			//enable button interrupts
			PCICR |= (1 << PCIE2);
			gameState = acceptInput(roundCount+1);
		}
		while (gameState == win) {
 4b0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <gameState>
 4b4:	84 30       	cpi	r24, 0x04	; 4
 4b6:	09 f0       	breq	.+2      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4b8:	5f c0       	rjmp	.+190    	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
			setDisplayValue(roundCount,&disp);
 4ba:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <roundCount>
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	71 e0       	ldi	r23, 0x01	; 1
 4c2:	0e 94 b6 05 	call	0xb6c	; 0xb6c <setDisplayValue>
 4c6:	ff ef       	ldi	r31, 0xFF	; 255
 4c8:	21 ee       	ldi	r18, 0xE1	; 225
 4ca:	84 e0       	ldi	r24, 0x04	; 4
 4cc:	f1 50       	subi	r31, 0x01	; 1
 4ce:	20 40       	sbci	r18, 0x00	; 0
 4d0:	80 40       	sbci	r24, 0x00	; 0
 4d2:	e1 f7       	brne	.-8      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4d6:	00 00       	nop
 4d8:	c3 e0       	ldi	r28, 0x03	; 3
 4da:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(100);
			for(int i=0; i<3; i++) {
				driveOutput(PURPLE);
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	0e 94 c5 00 	call	0x18a	; 0x18a <driveOutput>
 4e2:	9f ef       	ldi	r25, 0xFF	; 255
 4e4:	e3 ec       	ldi	r30, 0xC3	; 195
 4e6:	f9 e0       	ldi	r31, 0x09	; 9
 4e8:	91 50       	subi	r25, 0x01	; 1
 4ea:	e0 40       	sbci	r30, 0x00	; 0
 4ec:	f0 40       	sbci	r31, 0x00	; 0
 4ee:	e1 f7       	brne	.-8      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4f2:	00 00       	nop
				_delay_ms(200);
				driveOutput(BLUE);
 4f4:	81 2f       	mov	r24, r17
 4f6:	0e 94 c5 00 	call	0x18a	; 0x18a <driveOutput>
 4fa:	2f ef       	ldi	r18, 0xFF	; 255
 4fc:	83 ec       	ldi	r24, 0xC3	; 195
 4fe:	99 e0       	ldi	r25, 0x09	; 9
 500:	21 50       	subi	r18, 0x01	; 1
 502:	80 40       	sbci	r24, 0x00	; 0
 504:	90 40       	sbci	r25, 0x00	; 0
 506:	e1 f7       	brne	.-8      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 508:	00 c0       	rjmp	.+0      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 50a:	00 00       	nop
				_delay_ms(200);
				driveOutput(YELLOW);
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	0e 94 c5 00 	call	0x18a	; 0x18a <driveOutput>
 512:	ef ef       	ldi	r30, 0xFF	; 255
 514:	f3 ec       	ldi	r31, 0xC3	; 195
 516:	29 e0       	ldi	r18, 0x09	; 9
 518:	e1 50       	subi	r30, 0x01	; 1
 51a:	f0 40       	sbci	r31, 0x00	; 0
 51c:	20 40       	sbci	r18, 0x00	; 0
 51e:	e1 f7       	brne	.-8      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 520:	00 c0       	rjmp	.+0      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 522:	00 00       	nop
				_delay_ms(200);
				driveOutput(GREEN);
 524:	84 e0       	ldi	r24, 0x04	; 4
 526:	0e 94 c5 00 	call	0x18a	; 0x18a <driveOutput>
 52a:	8f ef       	ldi	r24, 0xFF	; 255
 52c:	93 ec       	ldi	r25, 0xC3	; 195
 52e:	e9 e0       	ldi	r30, 0x09	; 9
 530:	81 50       	subi	r24, 0x01	; 1
 532:	90 40       	sbci	r25, 0x00	; 0
 534:	e0 40       	sbci	r30, 0x00	; 0
 536:	e1 f7       	brne	.-8      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 538:	00 c0       	rjmp	.+0      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 53a:	00 00       	nop
				_delay_ms(200);
				driveOutput(RED);
 53c:	80 2f       	mov	r24, r16
 53e:	0e 94 c5 00 	call	0x18a	; 0x18a <driveOutput>
 542:	ff ef       	ldi	r31, 0xFF	; 255
 544:	23 ec       	ldi	r18, 0xC3	; 195
 546:	89 e0       	ldi	r24, 0x09	; 9
 548:	f1 50       	subi	r31, 0x01	; 1
 54a:	20 40       	sbci	r18, 0x00	; 0
 54c:	80 40       	sbci	r24, 0x00	; 0
 54e:	e1 f7       	brne	.-8      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 550:	00 c0       	rjmp	.+0      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 552:	00 00       	nop
				_delay_ms(200);
				driveOutput(ORANGE);
 554:	85 e0       	ldi	r24, 0x05	; 5
 556:	0e 94 c5 00 	call	0x18a	; 0x18a <driveOutput>
 55a:	9f ef       	ldi	r25, 0xFF	; 255
 55c:	e3 ec       	ldi	r30, 0xC3	; 195
 55e:	f9 e0       	ldi	r31, 0x09	; 9
 560:	91 50       	subi	r25, 0x01	; 1
 562:	e0 40       	sbci	r30, 0x00	; 0
 564:	f0 40       	sbci	r31, 0x00	; 0
 566:	e1 f7       	brne	.-8      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 568:	00 c0       	rjmp	.+0      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 56a:	00 00       	nop
 56c:	21 97       	sbiw	r28, 0x01	; 1
			gameState = acceptInput(roundCount+1);
		}
		while (gameState == win) {
			setDisplayValue(roundCount,&disp);
			_delay_ms(100);
			for(int i=0; i<3; i++) {
 56e:	09 f0       	breq	.+2      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 570:	b5 cf       	rjmp	.-150    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
				driveOutput(RED);
				_delay_ms(200);
				driveOutput(ORANGE);
				_delay_ms(200);
			}
			gameState = idle;
 572:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <gameState>
 576:	6f cf       	rjmp	.-290    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		}
		while (gameState == lose) {
 578:	85 30       	cpi	r24, 0x05	; 5
 57a:	09 f0       	breq	.+2      	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 57c:	6c cf       	rjmp	.-296    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
			TCCR1A = 0x03; 
 57e:	f7 01       	movw	r30, r14
 580:	10 83       	st	Z, r17
			toneOn(0xFF);
 582:	8f ef       	ldi	r24, 0xFF	; 255
 584:	0e 94 b4 00 	call	0x168	; 0x168 <toneOn>
 588:	ff ef       	ldi	r31, 0xFF	; 255
 58a:	21 e1       	ldi	r18, 0x11	; 17
 58c:	8a e7       	ldi	r24, 0x7A	; 122
 58e:	f1 50       	subi	r31, 0x01	; 1
 590:	20 40       	sbci	r18, 0x00	; 0
 592:	80 40       	sbci	r24, 0x00	; 0
 594:	e1 f7       	brne	.-8      	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
 596:	00 c0       	rjmp	.+0      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 598:	00 00       	nop
			_delay_ms(2500);
			toneOff();
 59a:	0e 94 bf 00 	call	0x17e	; 0x17e <toneOff>
			TCCR1A = 0x00;
 59e:	f7 01       	movw	r30, r14
 5a0:	10 82       	st	Z, r1
			gameState = idle;
 5a2:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <gameState>
 5a6:	57 cf       	rjmp	.-338    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
			driveOutput(OFF);
			setDisplayValue(roundCount,&disp);
			toneOff();
		}
		while (gameState == start) {
			generateSequence(MAX_SEQ_LENGTH, randomSeedPtr);
 5a8:	6f e0       	ldi	r22, 0x0F	; 15
 5aa:	71 e0       	ldi	r23, 0x01	; 1
 5ac:	85 e0       	ldi	r24, 0x05	; 5
 5ae:	0e 94 8a 00 	call	0x114	; 0x114 <generateSequence>
			gameState = playSequence;
 5b2:	00 93 0e 01 	sts	0x010E, r16	; 0x80010e <gameState>
 5b6:	58 cf       	rjmp	.-336    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>

000005b8 <__vector_7>:
	// disable timer1 interrupts to stop tone
	TIMSK1 &= (~1 << OCIE1A);
}


ISR(TIMER2_COMPA_vect) {
 5b8:	1f 92       	push	r1
 5ba:	0f 92       	push	r0
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	0f 92       	push	r0
 5c0:	11 24       	eor	r1, r1
 5c2:	2f 93       	push	r18
 5c4:	3f 93       	push	r19
 5c6:	4f 93       	push	r20
 5c8:	5f 93       	push	r21
 5ca:	6f 93       	push	r22
 5cc:	7f 93       	push	r23
 5ce:	8f 93       	push	r24
 5d0:	9f 93       	push	r25
 5d2:	af 93       	push	r26
 5d4:	bf 93       	push	r27
 5d6:	ef 93       	push	r30
 5d8:	ff 93       	push	r31
	displayDigits(&disp);
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	91 e0       	ldi	r25, 0x01	; 1
 5de:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <displayDigits>
}
 5e2:	ff 91       	pop	r31
 5e4:	ef 91       	pop	r30
 5e6:	bf 91       	pop	r27
 5e8:	af 91       	pop	r26
 5ea:	9f 91       	pop	r25
 5ec:	8f 91       	pop	r24
 5ee:	7f 91       	pop	r23
 5f0:	6f 91       	pop	r22
 5f2:	5f 91       	pop	r21
 5f4:	4f 91       	pop	r20
 5f6:	3f 91       	pop	r19
 5f8:	2f 91       	pop	r18
 5fa:	0f 90       	pop	r0
 5fc:	0f be       	out	0x3f, r0	; 63
 5fe:	0f 90       	pop	r0
 600:	1f 90       	pop	r1
 602:	18 95       	reti

00000604 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 604:	1f 92       	push	r1
 606:	0f 92       	push	r0
 608:	0f b6       	in	r0, 0x3f	; 63
 60a:	0f 92       	push	r0
 60c:	11 24       	eor	r1, r1
 60e:	8f 93       	push	r24
 610:	9f 93       	push	r25
	PORTB ^= (1 << speaker);
 612:	95 b1       	in	r25, 0x05	; 5
 614:	82 e0       	ldi	r24, 0x02	; 2
 616:	89 27       	eor	r24, r25
 618:	85 b9       	out	0x05, r24	; 5
}
 61a:	9f 91       	pop	r25
 61c:	8f 91       	pop	r24
 61e:	0f 90       	pop	r0
 620:	0f be       	out	0x3f, r0	; 63
 622:	0f 90       	pop	r0
 624:	1f 90       	pop	r1
 626:	18 95       	reti

00000628 <__vector_5>:

ISR(PCINT2_vect) {
 628:	1f 92       	push	r1
 62a:	0f 92       	push	r0
 62c:	0f b6       	in	r0, 0x3f	; 63
 62e:	0f 92       	push	r0
 630:	11 24       	eor	r1, r1
 632:	2f 93       	push	r18
 634:	3f 93       	push	r19
 636:	4f 93       	push	r20
 638:	5f 93       	push	r21
 63a:	6f 93       	push	r22
 63c:	7f 93       	push	r23
 63e:	8f 93       	push	r24
 640:	9f 93       	push	r25
 642:	af 93       	push	r26
 644:	bf 93       	push	r27
 646:	ef 93       	push	r30
 648:	ff 93       	push	r31
	if(gameState == idle) gameState = start;
 64a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <gameState>
 64e:	81 11       	cpse	r24, r1
 650:	04 c0       	rjmp	.+8      	; 0x65a <__vector_5+0x32>
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <gameState>
 658:	3c c0       	rjmp	.+120    	; 0x6d2 <__vector_5+0xaa>
	else if(gameState == inputSequence  && inputCounter != 0) {
 65a:	83 30       	cpi	r24, 0x03	; 3
 65c:	d1 f5       	brne	.+116    	; 0x6d2 <__vector_5+0xaa>
 65e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 662:	88 23       	and	r24, r24
 664:	b1 f1       	breq	.+108    	; 0x6d2 <__vector_5+0xaa>
		if(!(PIND & (1 << buttonPur))) {
 666:	4a 99       	sbic	0x09, 2	; 9
 668:	05 c0       	rjmp	.+10     	; 0x674 <__vector_5+0x4c>
			input = PURPLE;
 66a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <input>
			lastInput = PURPLE;
 66e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <lastInput>
 672:	2b c0       	rjmp	.+86     	; 0x6ca <__vector_5+0xa2>
		}
		else if(!(PIND & (1 << buttonYel))) {
 674:	4b 99       	sbic	0x09, 3	; 9
 676:	06 c0       	rjmp	.+12     	; 0x684 <__vector_5+0x5c>
			input = YELLOW;
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <input>
			lastInput = YELLOW;
 67e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <lastInput>
 682:	23 c0       	rjmp	.+70     	; 0x6ca <__vector_5+0xa2>
		}
		else if(!(PIND & (1 << buttonRed))) {
 684:	4c 99       	sbic	0x09, 4	; 9
 686:	06 c0       	rjmp	.+12     	; 0x694 <__vector_5+0x6c>
			input = RED;
 688:	82 e0       	ldi	r24, 0x02	; 2
 68a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <input>
			lastInput = RED;
 68e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <lastInput>
 692:	1b c0       	rjmp	.+54     	; 0x6ca <__vector_5+0xa2>

		}
		else if(!(PIND & (1 << buttonBlu))) {
 694:	4d 99       	sbic	0x09, 5	; 9
 696:	06 c0       	rjmp	.+12     	; 0x6a4 <__vector_5+0x7c>
			input = BLUE;
 698:	83 e0       	ldi	r24, 0x03	; 3
 69a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <input>
			lastInput = BLUE;
 69e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <lastInput>
 6a2:	13 c0       	rjmp	.+38     	; 0x6ca <__vector_5+0xa2>
		}
		else if(!(PIND & (1 << buttonGre))) {
 6a4:	4e 99       	sbic	0x09, 6	; 9
 6a6:	06 c0       	rjmp	.+12     	; 0x6b4 <__vector_5+0x8c>
			input = GREEN;
 6a8:	84 e0       	ldi	r24, 0x04	; 4
 6aa:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <input>
			lastInput = GREEN;
 6ae:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <lastInput>
 6b2:	0b c0       	rjmp	.+22     	; 0x6ca <__vector_5+0xa2>
		}
		else if(!(PIND & (1 << buttonOra))) {
 6b4:	4f 99       	sbic	0x09, 7	; 9
 6b6:	06 c0       	rjmp	.+12     	; 0x6c4 <__vector_5+0x9c>
			input = ORANGE;
 6b8:	85 e0       	ldi	r24, 0x05	; 5
 6ba:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <input>
			lastInput = ORANGE;
 6be:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <lastInput>
 6c2:	03 c0       	rjmp	.+6      	; 0x6ca <__vector_5+0xa2>
		}
		else {
			input = OFF;
 6c4:	86 e0       	ldi	r24, 0x06	; 6
 6c6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <input>
		}
		driveOutput(input);
 6ca:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <input>
 6ce:	0e 94 c5 00 	call	0x18a	; 0x18a <driveOutput>
	}
 6d2:	ff 91       	pop	r31
 6d4:	ef 91       	pop	r30
 6d6:	bf 91       	pop	r27
 6d8:	af 91       	pop	r26
 6da:	9f 91       	pop	r25
 6dc:	8f 91       	pop	r24
 6de:	7f 91       	pop	r23
 6e0:	6f 91       	pop	r22
 6e2:	5f 91       	pop	r21
 6e4:	4f 91       	pop	r20
 6e6:	3f 91       	pop	r19
 6e8:	2f 91       	pop	r18
 6ea:	0f 90       	pop	r0
 6ec:	0f be       	out	0x3f, r0	; 63
 6ee:	0f 90       	pop	r0
 6f0:	1f 90       	pop	r1
 6f2:	18 95       	reti

000006f4 <displayDigits>:
	}
	else if(disp->digitValue0 == 9){
		disp->digitValue1 ++;
		disp->digitValue0 = 0;
	}
	else disp->digitValue0++;
 6f4:	dc 01       	movw	r26, r24
 6f6:	14 96       	adiw	r26, 0x04	; 4
 6f8:	3c 91       	ld	r19, X
 6fa:	14 97       	sbiw	r26, 0x04	; 4
 6fc:	18 96       	adiw	r26, 0x08	; 8
 6fe:	8c 91       	ld	r24, X
 700:	18 97       	sbiw	r26, 0x08	; 8
 702:	83 13       	cpse	r24, r19
 704:	25 c0       	rjmp	.+74     	; 0x750 <displayDigits+0x5c>
 706:	48 b1       	in	r20, 0x08	; 8
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	9c 01       	movw	r18, r24
 70e:	15 96       	adiw	r26, 0x05	; 5
 710:	0c 90       	ld	r0, X
 712:	15 97       	sbiw	r26, 0x05	; 5
 714:	02 c0       	rjmp	.+4      	; 0x71a <displayDigits+0x26>
 716:	22 0f       	add	r18, r18
 718:	33 1f       	adc	r19, r19
 71a:	0a 94       	dec	r0
 71c:	e2 f7       	brpl	.-8      	; 0x716 <displayDigits+0x22>
 71e:	24 2b       	or	r18, r20
 720:	28 b9       	out	0x08, r18	; 8
 722:	28 b1       	in	r18, 0x08	; 8
 724:	14 96       	adiw	r26, 0x04	; 4
 726:	0c 90       	ld	r0, X
 728:	14 97       	sbiw	r26, 0x04	; 4
 72a:	02 c0       	rjmp	.+4      	; 0x730 <displayDigits+0x3c>
 72c:	88 0f       	add	r24, r24
 72e:	99 1f       	adc	r25, r25
 730:	0a 94       	dec	r0
 732:	e2 f7       	brpl	.-8      	; 0x72c <displayDigits+0x38>
 734:	80 95       	com	r24
 736:	82 23       	and	r24, r18
 738:	88 b9       	out	0x08, r24	; 8
 73a:	16 96       	adiw	r26, 0x06	; 6
 73c:	ec 91       	ld	r30, X
 73e:	16 97       	sbiw	r26, 0x06	; 6
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	15 96       	adiw	r26, 0x05	; 5
 744:	8c 91       	ld	r24, X
 746:	15 97       	sbiw	r26, 0x05	; 5
 748:	18 96       	adiw	r26, 0x08	; 8
 74a:	8c 93       	st	X, r24
 74c:	18 97       	sbiw	r26, 0x08	; 8
 74e:	22 c0       	rjmp	.+68     	; 0x794 <displayDigits+0xa0>
 750:	48 b1       	in	r20, 0x08	; 8
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	bc 01       	movw	r22, r24
 758:	02 c0       	rjmp	.+4      	; 0x75e <displayDigits+0x6a>
 75a:	66 0f       	add	r22, r22
 75c:	77 1f       	adc	r23, r23
 75e:	3a 95       	dec	r19
 760:	e2 f7       	brpl	.-8      	; 0x75a <displayDigits+0x66>
 762:	9b 01       	movw	r18, r22
 764:	24 2b       	or	r18, r20
 766:	28 b9       	out	0x08, r18	; 8
 768:	28 b1       	in	r18, 0x08	; 8
 76a:	15 96       	adiw	r26, 0x05	; 5
 76c:	0c 90       	ld	r0, X
 76e:	15 97       	sbiw	r26, 0x05	; 5
 770:	02 c0       	rjmp	.+4      	; 0x776 <displayDigits+0x82>
 772:	88 0f       	add	r24, r24
 774:	99 1f       	adc	r25, r25
 776:	0a 94       	dec	r0
 778:	e2 f7       	brpl	.-8      	; 0x772 <displayDigits+0x7e>
 77a:	80 95       	com	r24
 77c:	82 23       	and	r24, r18
 77e:	88 b9       	out	0x08, r24	; 8
 780:	17 96       	adiw	r26, 0x07	; 7
 782:	ec 91       	ld	r30, X
 784:	17 97       	sbiw	r26, 0x07	; 7
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	14 96       	adiw	r26, 0x04	; 4
 78a:	8c 91       	ld	r24, X
 78c:	14 97       	sbiw	r26, 0x04	; 4
 78e:	18 96       	adiw	r26, 0x08	; 8
 790:	8c 93       	st	X, r24
 792:	18 97       	sbiw	r26, 0x08	; 8
 794:	ea 30       	cpi	r30, 0x0A	; 10
 796:	f1 05       	cpc	r31, r1
 798:	08 f0       	brcs	.+2      	; 0x79c <displayDigits+0xa8>
 79a:	bf c1       	rjmp	.+894    	; 0xb1a <__stack+0x21b>
 79c:	e5 5c       	subi	r30, 0xC5	; 197
 79e:	ff 4f       	sbci	r31, 0xFF	; 255
 7a0:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <__tablejump2__>
 7a4:	25 b1       	in	r18, 0x05	; 5
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	bc 01       	movw	r22, r24
 7ac:	0c 90       	ld	r0, X
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <displayDigits+0xc0>
 7b0:	66 0f       	add	r22, r22
 7b2:	77 1f       	adc	r23, r23
 7b4:	0a 94       	dec	r0
 7b6:	e2 f7       	brpl	.-8      	; 0x7b0 <displayDigits+0xbc>
 7b8:	ac 01       	movw	r20, r24
 7ba:	11 96       	adiw	r26, 0x01	; 1
 7bc:	0c 90       	ld	r0, X
 7be:	11 97       	sbiw	r26, 0x01	; 1
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <displayDigits+0xd2>
 7c2:	44 0f       	add	r20, r20
 7c4:	55 1f       	adc	r21, r21
 7c6:	0a 94       	dec	r0
 7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <displayDigits+0xce>
 7ca:	36 2f       	mov	r19, r22
 7cc:	34 2b       	or	r19, r20
 7ce:	ac 01       	movw	r20, r24
 7d0:	12 96       	adiw	r26, 0x02	; 2
 7d2:	0c 90       	ld	r0, X
 7d4:	12 97       	sbiw	r26, 0x02	; 2
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <displayDigits+0xe8>
 7d8:	44 0f       	add	r20, r20
 7da:	55 1f       	adc	r21, r21
 7dc:	0a 94       	dec	r0
 7de:	e2 f7       	brpl	.-8      	; 0x7d8 <displayDigits+0xe4>
 7e0:	43 2b       	or	r20, r19
 7e2:	13 96       	adiw	r26, 0x03	; 3
 7e4:	0c 90       	ld	r0, X
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <displayDigits+0xf8>
 7e8:	88 0f       	add	r24, r24
 7ea:	99 1f       	adc	r25, r25
 7ec:	0a 94       	dec	r0
 7ee:	e2 f7       	brpl	.-8      	; 0x7e8 <displayDigits+0xf4>
 7f0:	84 2b       	or	r24, r20
 7f2:	80 95       	com	r24
 7f4:	82 23       	and	r24, r18
 7f6:	85 b9       	out	0x05, r24	; 5
 7f8:	08 95       	ret
 7fa:	45 b1       	in	r20, 0x05	; 5
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	9c 01       	movw	r18, r24
 802:	0c 90       	ld	r0, X
 804:	02 c0       	rjmp	.+4      	; 0x80a <displayDigits+0x116>
 806:	22 0f       	add	r18, r18
 808:	33 1f       	adc	r19, r19
 80a:	0a 94       	dec	r0
 80c:	e2 f7       	brpl	.-8      	; 0x806 <displayDigits+0x112>
 80e:	24 2b       	or	r18, r20
 810:	25 b9       	out	0x05, r18	; 5
 812:	25 b1       	in	r18, 0x05	; 5
 814:	bc 01       	movw	r22, r24
 816:	11 96       	adiw	r26, 0x01	; 1
 818:	0c 90       	ld	r0, X
 81a:	11 97       	sbiw	r26, 0x01	; 1
 81c:	02 c0       	rjmp	.+4      	; 0x822 <displayDigits+0x12e>
 81e:	66 0f       	add	r22, r22
 820:	77 1f       	adc	r23, r23
 822:	0a 94       	dec	r0
 824:	e2 f7       	brpl	.-8      	; 0x81e <displayDigits+0x12a>
 826:	ac 01       	movw	r20, r24
 828:	12 96       	adiw	r26, 0x02	; 2
 82a:	0c 90       	ld	r0, X
 82c:	12 97       	sbiw	r26, 0x02	; 2
 82e:	02 c0       	rjmp	.+4      	; 0x834 <displayDigits+0x140>
 830:	44 0f       	add	r20, r20
 832:	55 1f       	adc	r21, r21
 834:	0a 94       	dec	r0
 836:	e2 f7       	brpl	.-8      	; 0x830 <displayDigits+0x13c>
 838:	46 2b       	or	r20, r22
 83a:	13 96       	adiw	r26, 0x03	; 3
 83c:	0c 90       	ld	r0, X
 83e:	02 c0       	rjmp	.+4      	; 0x844 <displayDigits+0x150>
 840:	88 0f       	add	r24, r24
 842:	99 1f       	adc	r25, r25
 844:	0a 94       	dec	r0
 846:	e2 f7       	brpl	.-8      	; 0x840 <displayDigits+0x14c>
 848:	84 2b       	or	r24, r20
 84a:	80 95       	com	r24
 84c:	82 23       	and	r24, r18
 84e:	85 b9       	out	0x05, r24	; 5
 850:	08 95       	ret
 852:	45 b1       	in	r20, 0x05	; 5
 854:	81 e0       	ldi	r24, 0x01	; 1
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	9c 01       	movw	r18, r24
 85a:	11 96       	adiw	r26, 0x01	; 1
 85c:	0c 90       	ld	r0, X
 85e:	11 97       	sbiw	r26, 0x01	; 1
 860:	02 c0       	rjmp	.+4      	; 0x866 <displayDigits+0x172>
 862:	22 0f       	add	r18, r18
 864:	33 1f       	adc	r19, r19
 866:	0a 94       	dec	r0
 868:	e2 f7       	brpl	.-8      	; 0x862 <displayDigits+0x16e>
 86a:	24 2b       	or	r18, r20
 86c:	25 b9       	out	0x05, r18	; 5
 86e:	25 b1       	in	r18, 0x05	; 5
 870:	bc 01       	movw	r22, r24
 872:	0c 90       	ld	r0, X
 874:	02 c0       	rjmp	.+4      	; 0x87a <displayDigits+0x186>
 876:	66 0f       	add	r22, r22
 878:	77 1f       	adc	r23, r23
 87a:	0a 94       	dec	r0
 87c:	e2 f7       	brpl	.-8      	; 0x876 <displayDigits+0x182>
 87e:	ac 01       	movw	r20, r24
 880:	12 96       	adiw	r26, 0x02	; 2
 882:	0c 90       	ld	r0, X
 884:	12 97       	sbiw	r26, 0x02	; 2
 886:	02 c0       	rjmp	.+4      	; 0x88c <displayDigits+0x198>
 888:	44 0f       	add	r20, r20
 88a:	55 1f       	adc	r21, r21
 88c:	0a 94       	dec	r0
 88e:	e2 f7       	brpl	.-8      	; 0x888 <displayDigits+0x194>
 890:	46 2b       	or	r20, r22
 892:	13 96       	adiw	r26, 0x03	; 3
 894:	0c 90       	ld	r0, X
 896:	02 c0       	rjmp	.+4      	; 0x89c <displayDigits+0x1a8>
 898:	88 0f       	add	r24, r24
 89a:	99 1f       	adc	r25, r25
 89c:	0a 94       	dec	r0
 89e:	e2 f7       	brpl	.-8      	; 0x898 <displayDigits+0x1a4>
 8a0:	84 2b       	or	r24, r20
 8a2:	80 95       	com	r24
 8a4:	82 23       	and	r24, r18
 8a6:	85 b9       	out	0x05, r24	; 5
 8a8:	08 95       	ret
 8aa:	35 b1       	in	r19, 0x05	; 5
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	bc 01       	movw	r22, r24
 8b2:	0c 90       	ld	r0, X
 8b4:	02 c0       	rjmp	.+4      	; 0x8ba <displayDigits+0x1c6>
 8b6:	66 0f       	add	r22, r22
 8b8:	77 1f       	adc	r23, r23
 8ba:	0a 94       	dec	r0
 8bc:	e2 f7       	brpl	.-8      	; 0x8b6 <displayDigits+0x1c2>
 8be:	ac 01       	movw	r20, r24
 8c0:	11 96       	adiw	r26, 0x01	; 1
 8c2:	0c 90       	ld	r0, X
 8c4:	11 97       	sbiw	r26, 0x01	; 1
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <displayDigits+0x1d8>
 8c8:	44 0f       	add	r20, r20
 8ca:	55 1f       	adc	r21, r21
 8cc:	0a 94       	dec	r0
 8ce:	e2 f7       	brpl	.-8      	; 0x8c8 <displayDigits+0x1d4>
 8d0:	26 2f       	mov	r18, r22
 8d2:	24 2b       	or	r18, r20
 8d4:	23 2b       	or	r18, r19
 8d6:	25 b9       	out	0x05, r18	; 5
 8d8:	25 b1       	in	r18, 0x05	; 5
 8da:	ac 01       	movw	r20, r24
 8dc:	12 96       	adiw	r26, 0x02	; 2
 8de:	0c 90       	ld	r0, X
 8e0:	12 97       	sbiw	r26, 0x02	; 2
 8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <displayDigits+0x1f4>
 8e4:	44 0f       	add	r20, r20
 8e6:	55 1f       	adc	r21, r21
 8e8:	0a 94       	dec	r0
 8ea:	e2 f7       	brpl	.-8      	; 0x8e4 <displayDigits+0x1f0>
 8ec:	13 96       	adiw	r26, 0x03	; 3
 8ee:	0c 90       	ld	r0, X
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <displayDigits+0x202>
 8f2:	88 0f       	add	r24, r24
 8f4:	99 1f       	adc	r25, r25
 8f6:	0a 94       	dec	r0
 8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <displayDigits+0x1fe>
 8fa:	84 2b       	or	r24, r20
 8fc:	80 95       	com	r24
 8fe:	82 23       	and	r24, r18
 900:	85 b9       	out	0x05, r24	; 5
 902:	08 95       	ret
 904:	45 b1       	in	r20, 0x05	; 5
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	9c 01       	movw	r18, r24
 90c:	12 96       	adiw	r26, 0x02	; 2
 90e:	0c 90       	ld	r0, X
 910:	12 97       	sbiw	r26, 0x02	; 2
 912:	02 c0       	rjmp	.+4      	; 0x918 <__stack+0x19>
 914:	22 0f       	add	r18, r18
 916:	33 1f       	adc	r19, r19
 918:	0a 94       	dec	r0
 91a:	e2 f7       	brpl	.-8      	; 0x914 <__stack+0x15>
 91c:	24 2b       	or	r18, r20
 91e:	25 b9       	out	0x05, r18	; 5
 920:	25 b1       	in	r18, 0x05	; 5
 922:	bc 01       	movw	r22, r24
 924:	0c 90       	ld	r0, X
 926:	02 c0       	rjmp	.+4      	; 0x92c <__stack+0x2d>
 928:	66 0f       	add	r22, r22
 92a:	77 1f       	adc	r23, r23
 92c:	0a 94       	dec	r0
 92e:	e2 f7       	brpl	.-8      	; 0x928 <__stack+0x29>
 930:	ac 01       	movw	r20, r24
 932:	11 96       	adiw	r26, 0x01	; 1
 934:	0c 90       	ld	r0, X
 936:	11 97       	sbiw	r26, 0x01	; 1
 938:	02 c0       	rjmp	.+4      	; 0x93e <__stack+0x3f>
 93a:	44 0f       	add	r20, r20
 93c:	55 1f       	adc	r21, r21
 93e:	0a 94       	dec	r0
 940:	e2 f7       	brpl	.-8      	; 0x93a <__stack+0x3b>
 942:	46 2b       	or	r20, r22
 944:	13 96       	adiw	r26, 0x03	; 3
 946:	0c 90       	ld	r0, X
 948:	02 c0       	rjmp	.+4      	; 0x94e <__stack+0x4f>
 94a:	88 0f       	add	r24, r24
 94c:	99 1f       	adc	r25, r25
 94e:	0a 94       	dec	r0
 950:	e2 f7       	brpl	.-8      	; 0x94a <__stack+0x4b>
 952:	84 2b       	or	r24, r20
 954:	80 95       	com	r24
 956:	82 23       	and	r24, r18
 958:	85 b9       	out	0x05, r24	; 5
 95a:	08 95       	ret
 95c:	35 b1       	in	r19, 0x05	; 5
 95e:	81 e0       	ldi	r24, 0x01	; 1
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	bc 01       	movw	r22, r24
 964:	0c 90       	ld	r0, X
 966:	02 c0       	rjmp	.+4      	; 0x96c <__stack+0x6d>
 968:	66 0f       	add	r22, r22
 96a:	77 1f       	adc	r23, r23
 96c:	0a 94       	dec	r0
 96e:	e2 f7       	brpl	.-8      	; 0x968 <__stack+0x69>
 970:	ac 01       	movw	r20, r24
 972:	12 96       	adiw	r26, 0x02	; 2
 974:	0c 90       	ld	r0, X
 976:	12 97       	sbiw	r26, 0x02	; 2
 978:	02 c0       	rjmp	.+4      	; 0x97e <__stack+0x7f>
 97a:	44 0f       	add	r20, r20
 97c:	55 1f       	adc	r21, r21
 97e:	0a 94       	dec	r0
 980:	e2 f7       	brpl	.-8      	; 0x97a <__stack+0x7b>
 982:	26 2f       	mov	r18, r22
 984:	24 2b       	or	r18, r20
 986:	23 2b       	or	r18, r19
 988:	25 b9       	out	0x05, r18	; 5
 98a:	25 b1       	in	r18, 0x05	; 5
 98c:	ac 01       	movw	r20, r24
 98e:	11 96       	adiw	r26, 0x01	; 1
 990:	0c 90       	ld	r0, X
 992:	11 97       	sbiw	r26, 0x01	; 1
 994:	02 c0       	rjmp	.+4      	; 0x99a <__stack+0x9b>
 996:	44 0f       	add	r20, r20
 998:	55 1f       	adc	r21, r21
 99a:	0a 94       	dec	r0
 99c:	e2 f7       	brpl	.-8      	; 0x996 <__stack+0x97>
 99e:	13 96       	adiw	r26, 0x03	; 3
 9a0:	0c 90       	ld	r0, X
 9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <__stack+0xa9>
 9a4:	88 0f       	add	r24, r24
 9a6:	99 1f       	adc	r25, r25
 9a8:	0a 94       	dec	r0
 9aa:	e2 f7       	brpl	.-8      	; 0x9a4 <__stack+0xa5>
 9ac:	84 2b       	or	r24, r20
 9ae:	80 95       	com	r24
 9b0:	82 23       	and	r24, r18
 9b2:	85 b9       	out	0x05, r24	; 5
 9b4:	08 95       	ret
 9b6:	35 b1       	in	r19, 0x05	; 5
 9b8:	81 e0       	ldi	r24, 0x01	; 1
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	bc 01       	movw	r22, r24
 9be:	11 96       	adiw	r26, 0x01	; 1
 9c0:	0c 90       	ld	r0, X
 9c2:	11 97       	sbiw	r26, 0x01	; 1
 9c4:	02 c0       	rjmp	.+4      	; 0x9ca <__stack+0xcb>
 9c6:	66 0f       	add	r22, r22
 9c8:	77 1f       	adc	r23, r23
 9ca:	0a 94       	dec	r0
 9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <__stack+0xc7>
 9ce:	ac 01       	movw	r20, r24
 9d0:	12 96       	adiw	r26, 0x02	; 2
 9d2:	0c 90       	ld	r0, X
 9d4:	12 97       	sbiw	r26, 0x02	; 2
 9d6:	02 c0       	rjmp	.+4      	; 0x9dc <__stack+0xdd>
 9d8:	44 0f       	add	r20, r20
 9da:	55 1f       	adc	r21, r21
 9dc:	0a 94       	dec	r0
 9de:	e2 f7       	brpl	.-8      	; 0x9d8 <__stack+0xd9>
 9e0:	26 2f       	mov	r18, r22
 9e2:	24 2b       	or	r18, r20
 9e4:	23 2b       	or	r18, r19
 9e6:	25 b9       	out	0x05, r18	; 5
 9e8:	25 b1       	in	r18, 0x05	; 5
 9ea:	ac 01       	movw	r20, r24
 9ec:	0c 90       	ld	r0, X
 9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <__stack+0xf5>
 9f0:	44 0f       	add	r20, r20
 9f2:	55 1f       	adc	r21, r21
 9f4:	0a 94       	dec	r0
 9f6:	e2 f7       	brpl	.-8      	; 0x9f0 <__stack+0xf1>
 9f8:	13 96       	adiw	r26, 0x03	; 3
 9fa:	0c 90       	ld	r0, X
 9fc:	02 c0       	rjmp	.+4      	; 0xa02 <__stack+0x103>
 9fe:	88 0f       	add	r24, r24
 a00:	99 1f       	adc	r25, r25
 a02:	0a 94       	dec	r0
 a04:	e2 f7       	brpl	.-8      	; 0x9fe <__stack+0xff>
 a06:	84 2b       	or	r24, r20
 a08:	80 95       	com	r24
 a0a:	82 23       	and	r24, r18
 a0c:	85 b9       	out	0x05, r24	; 5
 a0e:	08 95       	ret
 a10:	35 b1       	in	r19, 0x05	; 5
 a12:	81 e0       	ldi	r24, 0x01	; 1
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	bc 01       	movw	r22, r24
 a18:	0c 90       	ld	r0, X
 a1a:	02 c0       	rjmp	.+4      	; 0xa20 <__stack+0x121>
 a1c:	66 0f       	add	r22, r22
 a1e:	77 1f       	adc	r23, r23
 a20:	0a 94       	dec	r0
 a22:	e2 f7       	brpl	.-8      	; 0xa1c <__stack+0x11d>
 a24:	ac 01       	movw	r20, r24
 a26:	11 96       	adiw	r26, 0x01	; 1
 a28:	0c 90       	ld	r0, X
 a2a:	11 97       	sbiw	r26, 0x01	; 1
 a2c:	02 c0       	rjmp	.+4      	; 0xa32 <__stack+0x133>
 a2e:	44 0f       	add	r20, r20
 a30:	55 1f       	adc	r21, r21
 a32:	0a 94       	dec	r0
 a34:	e2 f7       	brpl	.-8      	; 0xa2e <__stack+0x12f>
 a36:	46 2b       	or	r20, r22
 a38:	43 2b       	or	r20, r19
 a3a:	9c 01       	movw	r18, r24
 a3c:	12 96       	adiw	r26, 0x02	; 2
 a3e:	0c 90       	ld	r0, X
 a40:	12 97       	sbiw	r26, 0x02	; 2
 a42:	02 c0       	rjmp	.+4      	; 0xa48 <__stack+0x149>
 a44:	22 0f       	add	r18, r18
 a46:	33 1f       	adc	r19, r19
 a48:	0a 94       	dec	r0
 a4a:	e2 f7       	brpl	.-8      	; 0xa44 <__stack+0x145>
 a4c:	24 2b       	or	r18, r20
 a4e:	25 b9       	out	0x05, r18	; 5
 a50:	25 b1       	in	r18, 0x05	; 5
 a52:	13 96       	adiw	r26, 0x03	; 3
 a54:	0c 90       	ld	r0, X
 a56:	02 c0       	rjmp	.+4      	; 0xa5c <__stack+0x15d>
 a58:	88 0f       	add	r24, r24
 a5a:	99 1f       	adc	r25, r25
 a5c:	0a 94       	dec	r0
 a5e:	e2 f7       	brpl	.-8      	; 0xa58 <__stack+0x159>
 a60:	80 95       	com	r24
 a62:	82 23       	and	r24, r18
 a64:	85 b9       	out	0x05, r24	; 5
 a66:	08 95       	ret
 a68:	45 b1       	in	r20, 0x05	; 5
 a6a:	81 e0       	ldi	r24, 0x01	; 1
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	9c 01       	movw	r18, r24
 a70:	13 96       	adiw	r26, 0x03	; 3
 a72:	0c 90       	ld	r0, X
 a74:	13 97       	sbiw	r26, 0x03	; 3
 a76:	02 c0       	rjmp	.+4      	; 0xa7c <__stack+0x17d>
 a78:	22 0f       	add	r18, r18
 a7a:	33 1f       	adc	r19, r19
 a7c:	0a 94       	dec	r0
 a7e:	e2 f7       	brpl	.-8      	; 0xa78 <__stack+0x179>
 a80:	24 2b       	or	r18, r20
 a82:	25 b9       	out	0x05, r18	; 5
 a84:	25 b1       	in	r18, 0x05	; 5
 a86:	bc 01       	movw	r22, r24
 a88:	0c 90       	ld	r0, X
 a8a:	02 c0       	rjmp	.+4      	; 0xa90 <__stack+0x191>
 a8c:	66 0f       	add	r22, r22
 a8e:	77 1f       	adc	r23, r23
 a90:	0a 94       	dec	r0
 a92:	e2 f7       	brpl	.-8      	; 0xa8c <__stack+0x18d>
 a94:	ac 01       	movw	r20, r24
 a96:	11 96       	adiw	r26, 0x01	; 1
 a98:	0c 90       	ld	r0, X
 a9a:	11 97       	sbiw	r26, 0x01	; 1
 a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <__stack+0x1a3>
 a9e:	44 0f       	add	r20, r20
 aa0:	55 1f       	adc	r21, r21
 aa2:	0a 94       	dec	r0
 aa4:	e2 f7       	brpl	.-8      	; 0xa9e <__stack+0x19f>
 aa6:	46 2b       	or	r20, r22
 aa8:	12 96       	adiw	r26, 0x02	; 2
 aaa:	0c 90       	ld	r0, X
 aac:	02 c0       	rjmp	.+4      	; 0xab2 <__stack+0x1b3>
 aae:	88 0f       	add	r24, r24
 ab0:	99 1f       	adc	r25, r25
 ab2:	0a 94       	dec	r0
 ab4:	e2 f7       	brpl	.-8      	; 0xaae <__stack+0x1af>
 ab6:	84 2b       	or	r24, r20
 ab8:	80 95       	com	r24
 aba:	82 23       	and	r24, r18
 abc:	85 b9       	out	0x05, r24	; 5
 abe:	08 95       	ret
 ac0:	35 b1       	in	r19, 0x05	; 5
 ac2:	81 e0       	ldi	r24, 0x01	; 1
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	bc 01       	movw	r22, r24
 ac8:	0c 90       	ld	r0, X
 aca:	02 c0       	rjmp	.+4      	; 0xad0 <__stack+0x1d1>
 acc:	66 0f       	add	r22, r22
 ace:	77 1f       	adc	r23, r23
 ad0:	0a 94       	dec	r0
 ad2:	e2 f7       	brpl	.-8      	; 0xacc <__stack+0x1cd>
 ad4:	ac 01       	movw	r20, r24
 ad6:	13 96       	adiw	r26, 0x03	; 3
 ad8:	0c 90       	ld	r0, X
 ada:	13 97       	sbiw	r26, 0x03	; 3
 adc:	02 c0       	rjmp	.+4      	; 0xae2 <__stack+0x1e3>
 ade:	44 0f       	add	r20, r20
 ae0:	55 1f       	adc	r21, r21
 ae2:	0a 94       	dec	r0
 ae4:	e2 f7       	brpl	.-8      	; 0xade <__stack+0x1df>
 ae6:	26 2f       	mov	r18, r22
 ae8:	24 2b       	or	r18, r20
 aea:	23 2b       	or	r18, r19
 aec:	25 b9       	out	0x05, r18	; 5
 aee:	25 b1       	in	r18, 0x05	; 5
 af0:	ac 01       	movw	r20, r24
 af2:	11 96       	adiw	r26, 0x01	; 1
 af4:	0c 90       	ld	r0, X
 af6:	11 97       	sbiw	r26, 0x01	; 1
 af8:	02 c0       	rjmp	.+4      	; 0xafe <__stack+0x1ff>
 afa:	44 0f       	add	r20, r20
 afc:	55 1f       	adc	r21, r21
 afe:	0a 94       	dec	r0
 b00:	e2 f7       	brpl	.-8      	; 0xafa <__stack+0x1fb>
 b02:	12 96       	adiw	r26, 0x02	; 2
 b04:	0c 90       	ld	r0, X
 b06:	02 c0       	rjmp	.+4      	; 0xb0c <__stack+0x20d>
 b08:	88 0f       	add	r24, r24
 b0a:	99 1f       	adc	r25, r25
 b0c:	0a 94       	dec	r0
 b0e:	e2 f7       	brpl	.-8      	; 0xb08 <__stack+0x209>
 b10:	84 2b       	or	r24, r20
 b12:	80 95       	com	r24
 b14:	82 23       	and	r24, r18
 b16:	85 b9       	out	0x05, r24	; 5
 b18:	08 95       	ret
 b1a:	35 b1       	in	r19, 0x05	; 5
 b1c:	81 e0       	ldi	r24, 0x01	; 1
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	bc 01       	movw	r22, r24
 b22:	0c 90       	ld	r0, X
 b24:	02 c0       	rjmp	.+4      	; 0xb2a <__stack+0x22b>
 b26:	66 0f       	add	r22, r22
 b28:	77 1f       	adc	r23, r23
 b2a:	0a 94       	dec	r0
 b2c:	e2 f7       	brpl	.-8      	; 0xb26 <__stack+0x227>
 b2e:	ac 01       	movw	r20, r24
 b30:	11 96       	adiw	r26, 0x01	; 1
 b32:	0c 90       	ld	r0, X
 b34:	11 97       	sbiw	r26, 0x01	; 1
 b36:	02 c0       	rjmp	.+4      	; 0xb3c <__stack+0x23d>
 b38:	44 0f       	add	r20, r20
 b3a:	55 1f       	adc	r21, r21
 b3c:	0a 94       	dec	r0
 b3e:	e2 f7       	brpl	.-8      	; 0xb38 <__stack+0x239>
 b40:	46 2b       	or	r20, r22
 b42:	43 2b       	or	r20, r19
 b44:	9c 01       	movw	r18, r24
 b46:	12 96       	adiw	r26, 0x02	; 2
 b48:	0c 90       	ld	r0, X
 b4a:	12 97       	sbiw	r26, 0x02	; 2
 b4c:	02 c0       	rjmp	.+4      	; 0xb52 <__stack+0x253>
 b4e:	22 0f       	add	r18, r18
 b50:	33 1f       	adc	r19, r19
 b52:	0a 94       	dec	r0
 b54:	e2 f7       	brpl	.-8      	; 0xb4e <__stack+0x24f>
 b56:	24 2b       	or	r18, r20
 b58:	13 96       	adiw	r26, 0x03	; 3
 b5a:	0c 90       	ld	r0, X
 b5c:	02 c0       	rjmp	.+4      	; 0xb62 <__stack+0x263>
 b5e:	88 0f       	add	r24, r24
 b60:	99 1f       	adc	r25, r25
 b62:	0a 94       	dec	r0
 b64:	e2 f7       	brpl	.-8      	; 0xb5e <__stack+0x25f>
 b66:	82 2b       	or	r24, r18
 b68:	85 b9       	out	0x05, r24	; 5
 b6a:	08 95       	ret

00000b6c <setDisplayValue>:
}

void setDisplayValue(uint8_t value, sSegPtr_t disp) {
		disp -> digitValue0 = value % 10;
 b6c:	9d ec       	ldi	r25, 0xCD	; 205
 b6e:	89 9f       	mul	r24, r25
 b70:	91 2d       	mov	r25, r1
 b72:	11 24       	eor	r1, r1
 b74:	96 95       	lsr	r25
 b76:	96 95       	lsr	r25
 b78:	96 95       	lsr	r25
 b7a:	39 2f       	mov	r19, r25
 b7c:	33 0f       	add	r19, r19
 b7e:	23 2f       	mov	r18, r19
 b80:	22 0f       	add	r18, r18
 b82:	22 0f       	add	r18, r18
 b84:	23 0f       	add	r18, r19
 b86:	82 1b       	sub	r24, r18
 b88:	fb 01       	movw	r30, r22
 b8a:	86 83       	std	Z+6, r24	; 0x06
		disp -> digitValue1 = (value / 10);
 b8c:	97 83       	std	Z+7, r25	; 0x07
 b8e:	08 95       	ret

00000b90 <__tablejump2__>:
 b90:	ee 0f       	add	r30, r30
 b92:	ff 1f       	adc	r31, r31
 b94:	05 90       	lpm	r0, Z+
 b96:	f4 91       	lpm	r31, Z
 b98:	e0 2d       	mov	r30, r0
 b9a:	09 94       	ijmp

00000b9c <_exit>:
 b9c:	f8 94       	cli

00000b9e <__stop_program>:
 b9e:	ff cf       	rjmp	.-2      	; 0xb9e <__stop_program>
